webpackHotUpdate("rounda",{

/***/ "./packages/rounda/src/components/index.js":
/*!*************************************************!*\
  !*** ./packages/rounda/src/components/index.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _frontity_components_switch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @frontity/components/switch */ \"./node_modules/@frontity/components/switch.tsx\");\n/* harmony import */ var _header__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./header */ \"./packages/rounda/src/components/header.js\");\n/* harmony import */ var _home__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./home */ \"./packages/rounda/src/components/home.js\");\n/* harmony import */ var _works__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./works */ \"./packages/rounda/src/components/works.js\");\n/* harmony import */ var _about__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./about */ \"./packages/rounda/src/components/about.js\");\n/* harmony import */ var _servicess__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./servicess */ \"./packages/rounda/src/components/servicess.js\");\n/* harmony import */ var _singleWork__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./singleWork */ \"./packages/rounda/src/components/singleWork.js\");\n/* harmony import */ var _preloader__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./preloader */ \"./packages/rounda/src/components/preloader.js\");\n/* harmony import */ var react_spring__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-spring */ \"./node_modules/react-spring/web.js\");\n/* harmony import */ var _fonts_gangstergrotesk_regular_ttf__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../fonts/gangstergrotesk-regular.ttf */ \"./packages/rounda/src/fonts/gangstergrotesk-regular.ttf\");\n/* harmony import */ var _fonts_gangstergrotesk_light_ttf__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../fonts/gangstergrotesk-light.ttf */ \"./packages/rounda/src/fonts/gangstergrotesk-light.ttf\");\n/* harmony import */ var _images_favicon_apple_touch_icon_png__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../images/favicon/apple-touch-icon.png */ \"./packages/rounda/src/images/favicon/apple-touch-icon.png\");\n/* harmony import */ var _images_favicon_favicon_32x32_png__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../images/favicon/favicon-32x32.png */ \"./packages/rounda/src/images/favicon/favicon-32x32.png\");\n/* harmony import */ var _images_favicon_favicon_16x16_png__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../images/favicon/favicon-16x16.png */ \"./packages/rounda/src/images/favicon/favicon-16x16.png\");\n/* harmony import */ var _images_favicon_safari_pinned_tab_svg__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../images/favicon/safari-pinned-tab.svg */ \"./packages/rounda/src/images/favicon/safari-pinned-tab.svg\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n//import webManifest from \"../images/favicon/site.webmanifest\";\nconst Theme=({state,actions})=>{//console.log(state);\nconst data=state.source.get(state.router.link);//console.log(data);\n//const page = state.source[data.type][data.id];\n//console.log(page);\n//const content = page.acf;\n//console.log(content);\nconst pageTransitions=Object(react_spring__WEBPACK_IMPORTED_MODULE_11__[\"useTransition\"])(state.router.link,null,{config:{duration:500},from:{opacity:0},enter:{opacity:1},leave:{opacity:0,display:\"none\"}});return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsxs\"])(frontity__WEBPACK_IMPORTED_MODULE_2__[\"Head\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"title\",{children:state.frontity.title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"meta\",{name:\"description\",content:state.frontity.description}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"html\",{lang:\"en\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"link\",{rel:\"apple-touch-icon\",sizes:\"180x180\",href:_images_favicon_apple_touch_icon_png__WEBPACK_IMPORTED_MODULE_14__[\"default\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"link\",{rel:\"icon\",type:\"image/png\",sizes:\"32x32\",href:_images_favicon_favicon_32x32_png__WEBPACK_IMPORTED_MODULE_15__[\"default\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"link\",{rel:\"icon\",type:\"image/png\",sizes:\"16x16\",href:_images_favicon_favicon_16x16_png__WEBPACK_IMPORTED_MODULE_16__[\"default\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"link\",{rel:\"mask-icon\",href:_images_favicon_safari_pinned_tab_svg__WEBPACK_IMPORTED_MODULE_17__[\"default\"],color:\"#5bbad5\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"meta\",{name:\"msapplication-TileColor\",content:\"#ffc40d\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"meta\",{name:\"theme-color\",content:\"#ffffff\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(frontity__WEBPACK_IMPORTED_MODULE_2__[\"Global\"],{styles:globalStyles}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(_header__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsxs\"])(_frontity_components_switch__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(_home__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{when:data.isHome}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(_works__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{when:data.id==35&&data.isReady}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(_about__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{when:data.id==53&&data.isReady}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(_servicess__WEBPACK_IMPORTED_MODULE_8__[\"default\"],{when:data.id==84&&data.isReady}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(_singleWork__WEBPACK_IMPORTED_MODULE_9__[\"default\"],{when:data.isPost&&data.isReady}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(_preloader__WEBPACK_IMPORTED_MODULE_10__[\"default\"],{when:data.isFetching})]})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Theme));const globalStyles=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"css\"])(\"@font-face{font-family:\\\"gangsterRegular\\\";src:url(\",_fonts_gangstergrotesk_regular_ttf__WEBPACK_IMPORTED_MODULE_12__[\"default\"],\");}@font-face{font-family:\\\"gangsterLight\\\";src:url(\",_fonts_gangstergrotesk_light_ttf__WEBPACK_IMPORTED_MODULE_13__[\"default\"],\");}body{margin:0;font-family:\\\"gangsterLight\\\";}p::selection{background-color:#f7f7a8;}\"+( false?undefined:\";label:globalStyles;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwtU2l0ZXMvUm91bmRhLXVwZGF0ZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0V3QiIsImZpbGUiOiIvVXNlcnMvQWl2YXJzMS9EZXNrdG9wL0xvY2FsLVNpdGVzL1JvdW5kYS11cGRhdGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0LCB1c2VTdGF0ZX0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBHbG9iYWwsIGNzcywgY29ubmVjdCwgSGVhZCB9IGZyb20gXCJmcm9udGl0eVwiO1xuaW1wb3J0IFN3aXRjaCBmcm9tIFwiQGZyb250aXR5L2NvbXBvbmVudHMvc3dpdGNoXCI7XG5pbXBvcnQgSGVhZGVyIGZyb20gXCIuL2hlYWRlclwiO1xuaW1wb3J0IEhvbWUgZnJvbSBcIi4vaG9tZVwiO1xuaW1wb3J0IFdvcmtzIGZyb20gXCIuL3dvcmtzXCI7XG5pbXBvcnQgQWJvdXQgZnJvbSBcIi4vYWJvdXRcIjtcbmltcG9ydCBTZXJ2aWNlcyBmcm9tIFwiLi9zZXJ2aWNlc3NcIjtcbmltcG9ydCBTaW5nbGVXb3JrIGZyb20gXCIuL3NpbmdsZVdvcmtcIjtcbmltcG9ydCBMb2FkaW5nIGZyb20gXCIuL3ByZWxvYWRlclwiO1xuaW1wb3J0IHsgdXNlVHJhbnNpdGlvbiwgYW5pbWF0ZWQgfSBmcm9tIFwicmVhY3Qtc3ByaW5nXCI7XG5cbmltcG9ydCBnYW5nc3RlclJlZ3VsYXIgZnJvbSBcIi4uL2ZvbnRzL2dhbmdzdGVyZ3JvdGVzay1yZWd1bGFyLnR0ZlwiO1xuaW1wb3J0IGdhbmdzdGVyTGlnaHQgZnJvbSBcIi4uL2ZvbnRzL2dhbmdzdGVyZ3JvdGVzay1saWdodC50dGZcIjtcblxuaW1wb3J0IGFwcGxlVG91Y2hJY29uIGZyb20gXCIuLi9pbWFnZXMvZmF2aWNvbi9hcHBsZS10b3VjaC1pY29uLnBuZ1wiO1xuaW1wb3J0IGZhdmljb24zMiBmcm9tIFwiLi4vaW1hZ2VzL2Zhdmljb24vZmF2aWNvbi0zMngzMi5wbmdcIjtcbmltcG9ydCBmYXZpY29uMTYgZnJvbSBcIi4uL2ltYWdlcy9mYXZpY29uL2Zhdmljb24tMTZ4MTYucG5nXCI7XG4vL2ltcG9ydCB3ZWJNYW5pZmVzdCBmcm9tIFwiLi4vaW1hZ2VzL2Zhdmljb24vc2l0ZS53ZWJtYW5pZmVzdFwiO1xuaW1wb3J0IHNhZmFyaVBpbm5lZFRhYiBmcm9tIFwiLi4vaW1hZ2VzL2Zhdmljb24vc2FmYXJpLXBpbm5lZC10YWIuc3ZnXCI7XG5cbmNvbnN0IFRoZW1lID0gKHsgc3RhdGUsIGFjdGlvbnMgfSkgPT4ge1xuICAvL2NvbnNvbGUubG9nKHN0YXRlKTtcbiAgY29uc3QgZGF0YSA9IHN0YXRlLnNvdXJjZS5nZXQoc3RhdGUucm91dGVyLmxpbmspO1xuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xuICAvL2NvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcbiAgLy9jb25zb2xlLmxvZyhwYWdlKTtcbiAgLy9jb25zdCBjb250ZW50ID0gcGFnZS5hY2Y7XG4gIC8vY29uc29sZS5sb2coY29udGVudCk7XG5cbiAgY29uc3QgcGFnZVRyYW5zaXRpb25zID0gdXNlVHJhbnNpdGlvbihzdGF0ZS5yb3V0ZXIubGluaywgbnVsbCwge1xuICAgIGNvbmZpZzogeyBkdXJhdGlvbjogNTAwIH0sXG4gICAgZnJvbTogeyBvcGFjaXR5OiAwIH0sXG4gICAgZW50ZXI6IHsgb3BhY2l0eTogMSB9LFxuICAgIGxlYXZlOiB7IG9wYWNpdHk6IDAsIGRpc3BsYXk6IFwibm9uZVwiIH0sXG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxIZWFkPlxuICAgICAgICA8dGl0bGU+e3N0YXRlLmZyb250aXR5LnRpdGxlfTwvdGl0bGU+XG4gICAgICAgIDxtZXRhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGNvbnRlbnQ9e3N0YXRlLmZyb250aXR5LmRlc2NyaXB0aW9ufSAvPlxuICAgICAgICA8aHRtbCBsYW5nPVwiZW5cIiAvPlxuICAgICAgICA8bGluayByZWw9XCJhcHBsZS10b3VjaC1pY29uXCIgc2l6ZXM9XCIxODB4MTgwXCIgaHJlZj17YXBwbGVUb3VjaEljb259Lz5cbiAgICAgICAgPGxpbmsgcmVsPVwiaWNvblwiIHR5cGU9XCJpbWFnZS9wbmdcIiBzaXplcz1cIjMyeDMyXCIgaHJlZj17ZmF2aWNvbjMyfS8+XG4gICAgICAgIDxsaW5rIHJlbD1cImljb25cIiB0eXBlPVwiaW1hZ2UvcG5nXCIgc2l6ZXM9XCIxNngxNlwiIGhyZWY9e2Zhdmljb24xNn0vPlxuICAgICAgICA8bGluayByZWw9XCJtYXNrLWljb25cIiBocmVmPXtzYWZhcmlQaW5uZWRUYWJ9IGNvbG9yPVwiIzViYmFkNVwiLz5cbiAgICAgICAgPG1ldGEgbmFtZT1cIm1zYXBwbGljYXRpb24tVGlsZUNvbG9yXCIgY29udGVudD1cIiNmZmM0MGRcIi8+XG4gICAgICAgIDxtZXRhIG5hbWU9XCJ0aGVtZS1jb2xvclwiIGNvbnRlbnQ9XCIjZmZmZmZmXCIvPlxuICAgICAgPC9IZWFkPlxuXG4gICAgICA8R2xvYmFsIHN0eWxlcz17Z2xvYmFsU3R5bGVzfSAvPlxuICAgICAgPEhlYWRlciAvPlxuICAgICAgey8qIHtwYWdlVHJhbnNpdGlvbnMubWFwKCh7IHByb3BzLCBrZXkgfSkgPT4gKFxuICAgICAgICA8YW5pbWF0ZWQuZGl2IHN0eWxlPXtwcm9wc30ga2V5PXtrZXl9PiAqL31cbiAgICAgIDxTd2l0Y2g+XG4gICAgICAgIDxIb21lIHdoZW49e2RhdGEuaXNIb21lfSAvPlxuICAgICAgICB7LyogPEVtcHR5IHdoZW49e2RhdGEuaWQgPT0gMzV9IC8+ICovfVxuICAgICAgICA8V29ya3Mgd2hlbj17ZGF0YS5pZCA9PSAzNSAmJiBkYXRhLmlzUmVhZHl9IC8+XG4gICAgICAgIDxBYm91dCB3aGVuPXtkYXRhLmlkID09IDUzICYmIGRhdGEuaXNSZWFkeX0gLz5cbiAgICAgICAgPFNlcnZpY2VzIHdoZW49e2RhdGEuaWQgPT0gODQgJiYgZGF0YS5pc1JlYWR5fSAvPlxuICAgICAgICA8U2luZ2xlV29yayB3aGVuPXtkYXRhLmlzUG9zdCAmJiBkYXRhLmlzUmVhZHl9IC8+XG4gICAgICAgIDxMb2FkaW5nIHdoZW49e2RhdGEuaXNGZXRjaGluZ30gLz5cbiAgICAgIDwvU3dpdGNoPlxuICAgICAgey8qIDwvYW5pbWF0ZWQuZGl2PlxuICAgICAgKSl9ICovfVxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChUaGVtZSk7XG5cbmNvbnN0IGdsb2JhbFN0eWxlcyA9IGNzc2BcbiAgQGZvbnQtZmFjZSB7XG4gICAgZm9udC1mYW1pbHk6IFwiZ2FuZ3N0ZXJSZWd1bGFyXCI7XG4gICAgc3JjOiB1cmwoJHtnYW5nc3RlclJlZ3VsYXJ9KTtcbiAgfVxuXG4gIEBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiBcImdhbmdzdGVyTGlnaHRcIjtcbiAgICBzcmM6IHVybCgke2dhbmdzdGVyTGlnaHR9KTtcbiAgfVxuXG4gIGJvZHkge1xuICAgIG1hcmdpbjogMDtcbiAgICBmb250LWZhbWlseTogXCJnYW5nc3RlckxpZ2h0XCI7XG4gIH1cblxuICBwOjpzZWxlY3Rpb24ge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmN2Y3YTg7XG4gIH1cbmA7XG4iXX0= */\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/rounda/src/components/index.js\n");

/***/ }),

/***/ "./packages/rounda/src/components/services.js":
false,

/***/ "./packages/rounda/src/components/servicess.js":
/*!*****************************************************!*\
  !*** ./packages/rounda/src/components/servicess.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap */ \"./node_modules/gsap/index.js\");\n/* harmony import */ var gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap/ScrollTrigger */ \"./node_modules/gsap/ScrollTrigger.js\");\n/* harmony import */ var _footer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./footer */ \"./packages/rounda/src/components/footer.js\");\n/* harmony import */ var _cursor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cursor */ \"./packages/rounda/src/components/cursor.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}gsap__WEBPACK_IMPORTED_MODULE_2__[\"default\"].registerPlugin(gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_3__[\"ScrollTrigger\"]);var _ref= false?undefined:{name:\"600c6d-Services\",styles:\"align-self:center;width:70%;display:flex;flex-direction:column;min-height:100vh;margin:90px 0 90px 0;@media only screen and (max-width: 880px){width:90%;};label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref2= false?undefined:{name:\"1hoxj5o-Services\",styles:\"font-size:26px;display:grid;grid-template-columns:1fr 1fr;margin:auto 10% auto 10%;column-gap:5vw;row-gap:5vh;p sup{color:#f7f7a8;}@media only screen and (max-width: 600px){grid-template-columns:1fr;row-gap:0;margin:5vh 10% 5vh 10%;}@media only screen and (max-width: 425px){font-size:6.1vw;};label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref3= false?undefined:{name:\"1km4n98-Services\",styles:\"font-size:24px;margin:10vh 0 0 5vw;@media only screen and (max-width: 425px){font-size:5.7vw;};label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref4= false?undefined:{name:\"15l0wb-Services\",styles:\"width:100%;min-height:100vh;background-color:black;display:flex;flex-direction:column;color:white;label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref5= false?undefined:{name:\"1qqewvn-Services\",styles:\"font-size:24px;align-self:flex-end;margin-left:1.5em;@media only screen and (max-width: 425px){font-size:5vw;};label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref6= false?undefined:{name:\"16dujro-Services\",styles:\"font-size:100px;margin:0;@media only screen and (max-width: 425px){font-size:20vw;};label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref7= false?undefined:{name:\"9nukb6-Services\",styles:\"width:90%;height:60%;display:flex;flex-direction:row;justify-content:center;@media only screen and (max-width: 790px){flex-direction:column;height:initial;};label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref8= false?undefined:{name:\"4qnn46-Services\",styles:\"min-height:100vh;width:100%;display:flex;justify-content:center;align-items:center;label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref9= false?undefined:{name:\"189g6ra-oneService\",styles:\"justify-self:end;grid-column:4/5;label:oneService;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref10= false?undefined:{name:\"1db5l97-oneService\",styles:\"height:90px;display:grid;align-items:center;label:oneService;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwtU2l0ZXMvUm91bmRhLXVwZGF0ZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvc2VydmljZXNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlHdUIiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbC1TaXRlcy9Sb3VuZGEtdXBkYXRlL3BhY2thZ2VzL3JvdW5kYS9zcmMvY29tcG9uZW50cy9zZXJ2aWNlc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjb25uZWN0LCBjc3MsIHN0eWxlZCB9IGZyb20gXCJmcm9udGl0eVwiO1xuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcbmltcG9ydCB7IFNjcm9sbFRyaWdnZXIgfSBmcm9tIFwiZ3NhcC9TY3JvbGxUcmlnZ2VyXCI7XG5nc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpO1xuaW1wb3J0IEZvb3RlciBmcm9tIFwiLi9mb290ZXJcIjtcbmltcG9ydCBDdXJzb3IgZnJvbSBcIi4vY3Vyc29yXCI7XG5cbmNvbnN0IFNlcnZpY2VzID0gKHsgc3RhdGUgfSkgPT4ge1xuICAvL2NvbnNvbGUubG9nKHN0YXRlKTtcbiAgY29uc3QgZGF0YSA9IHN0YXRlLnNvdXJjZS5nZXQoc3RhdGUucm91dGVyLmxpbmspO1xuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xuICBjb25zdCBwYWdlID0gc3RhdGUuc291cmNlW2RhdGEudHlwZV1bZGF0YS5pZF07XG4gIC8vY29uc29sZS5sb2cocGFnZSk7XG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcbiAgY29uc29sZS5sb2coY29udGVudCk7XG5cbiAgY29uc3QgcG9pbnRzID0gW107XG4gIGxldCBjb3VudGVyID0gMDtcblxuICBjb25zdCBnZXRQb2ludHMgPSAoKSA9PiB7XG4gICAgY29udGVudC5wb2ludHMuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGNvdW50ZXIrKztcbiAgICAgIGNvbnN0IG9uZVBvaW50ID0gKFxuICAgICAgICA8cD5cbiAgICAgICAgICA8c3VwPntjb3VudGVyfS48L3N1cD4ge2VsLnBvaW50fVxuICAgICAgICA8L3A+XG4gICAgICApO1xuICAgICAgcG9pbnRzLnB1c2gob25lUG9pbnQpO1xuICAgIH0pO1xuICB9O1xuXG4gIGdldFBvaW50cygpO1xuXG4gIGNvbnN0IFBvaW50cyA9ICgpID0+IHtcbiAgICByZXR1cm4gcG9pbnRzO1xuICB9O1xuXG4gIGNvbnN0IHNlcnZpY2VzID0gW107XG5cbiAgY29uc3QgZ2V0U2VydmljZXMgPSAoKSA9PiB7XG4gICAgY29udGVudC5zZXJ2aWNlcy5mb3JFYWNoKChzZXJ2aWNlKSA9PiB7XG4gICAgICBjb25zdCBzZXJ2aWNlSWNvbiA9IHNlcnZpY2Uuc2VydmljZV9pY29uO1xuICAgICAgY29uc3Qgc2VydmljZVRpdGxlID0gc2VydmljZS5zZXJ2aWNlX3RpdGxlO1xuICAgICAgY29uc3Qgc2VydmljZVRleHQgPSBzZXJ2aWNlLnNlcnZpY2VfdGV4dDtcbiAgICAgIGNvbnN0IG9uZVNlcnZpY2UgPSAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9XCJvbmVTZXJ2aWNlXCJcbiAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDUwcHggMWZyIDJmciAxZnI7XG4gICAgICAgICAgICBjb2x1bW4tZ2FwOiAzdnc7XG4gICAgICAgICAgICBib3JkZXItdG9wOiAwLjVweCBzb2xpZCAjNzA3MDcwO1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMC41cHggc29saWQgIzcwNzA3MDtcbiAgICAgICAgICAgIGhlaWdodDogOTBweDtcblxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDUwcHggYXV0byBhdXRvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGB9XG4gICAgICAgICAgb25DbGljaz17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBvcGVuVXAoZXZlbnQpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2IGNzcz17Y3NzYFxuICAgICAgICAgIGhlaWdodDogOTBweDtcbiAgICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgIGhlaWdodDogYXV0bztcbiAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgc3JjPXtzZXJ2aWNlSWNvbn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBoZWlnaHQ6IDkwcHg7XG4gICAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGB9PlxuICAgICAgICAgIDxwIGNzcz17Y3NzYFxuICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICAgICAgICBgfT57c2VydmljZVRpdGxlfTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJvbmVTZXJ2aWNlVGV4dFwiXG4gICAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDIwcHg7XG5cbiAgICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgICAgICAgICAgIGdyaWQtY29sdW1uOiAxLzM7XG4gICAgICAgICAgICAgICAgZ3JpZC1yb3c6IDIvMztcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAwO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xuICAgICAgICAgICAgICAgIGdyaWQtY29sdW1uOiAxLzQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGB9XG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHNlcnZpY2VUZXh0IH19XG4gICAgICAgICAgPjwvZGl2PlxuICAgICAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgaGVpZ2h0OiA5MHB4O1xuICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBgfT5cbiAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgICAganVzdGlmeS1zZWxmOiBlbmQ7XG4gICAgICAgICAgICAgIGdyaWQtY29sdW1uOiA0LzU7XG4gICAgICAgICAgICBgfVxuICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICB3aWR0aD1cIjUwXCJcbiAgICAgICAgICAgIGhlaWdodD1cIjUwXCJcbiAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgNTkgNTlcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxnXG4gICAgICAgICAgICAgIGlkPVwiR3JvdXBfNDNcIlxuICAgICAgICAgICAgICBkYXRhLW5hbWU9XCJHcm91cCA0M1wiXG4gICAgICAgICAgICAgIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtMTQ0MC41IC0yMzU4LjUpXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGxpbmUgXG4gICAgICAgICAgICAgICAgaWQ9XCJMaW5lXzEzXCJcbiAgICAgICAgICAgICAgICBkYXRhLW5hbWU9XCJMaW5lIDEzXCJcbiAgICAgICAgICAgICAgICB5Mj1cIjU5XCJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMTQ3MC41IDIzNTguNSlcIlxuICAgICAgICAgICAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgICAgICAgICAgICBzdHJva2U9XCIjNzA3MDcwXCJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aD1cIjFcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8bGluZVxuICAgICAgICAgICAgICAgIGlkPVwiTGluZV8xNFwiXG4gICAgICAgICAgICAgICAgZGF0YS1uYW1lPVwiTGluZSAxNFwiXG4gICAgICAgICAgICAgICAgeDE9XCI1OVwiXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDE0NDAuNSAyMzg4LjUpXCJcbiAgICAgICAgICAgICAgICBmaWxsPVwibm9uZVwiXG4gICAgICAgICAgICAgICAgc3Ryb2tlPVwiIzcwNzA3MFwiXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg9XCIxXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgICAgc2VydmljZXMucHVzaChvbmVTZXJ2aWNlKTtcbiAgICB9KTtcbiAgfTtcblxuICBnZXRTZXJ2aWNlcygpO1xuXG4gIGNvbnN0IFNlcnZpY2VzVGFibGUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHNlcnZpY2VzO1xuICB9O1xuXG4gIGNvbnN0IG9wZW5VcCA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IGhpZGRlblRleHQgPSBldmVudC5jdXJyZW50VGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoXCIub25lU2VydmljZVRleHRcIik7XG4gICAgY29uc3QgcGx1c0ljb24gPSBldmVudC5jdXJyZW50VGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoXCIjTGluZV8xM1wiKTtcblxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm9wZW5lZFwiKSkge1xuICAgICAgZ3NhcC50byhldmVudC5jdXJyZW50VGFyZ2V0LCAwLjMsIHtcbiAgICAgICAgaGVpZ2h0OiA5MCxcbiAgICAgIH0pO1xuICAgICAgZ3NhcC50byhoaWRkZW5UZXh0LCAwLjEsIHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgIH0pO1xuICAgICAgZ3NhcC50byhwbHVzSWNvbiwgMC4zLCB7XG4gICAgICAgIGF0dHI6e3gxOiAwLCB4MjogMCwgeTE6MCwgeTI6NTl9XG4gICAgICB9KVxuICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKFwib3BlbmVkXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnc2FwLnRvKGV2ZW50LmN1cnJlbnRUYXJnZXQsIDAuMywge1xuICAgICAgICBoZWlnaHQ6IFwiYXV0b1wiLFxuICAgICAgfSk7XG4gICAgICBnc2FwLnRvKGhpZGRlblRleHQsIDAuMywge1xuICAgICAgICBkZWxheTogMC4yLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgfSk7XG4gICAgICBnc2FwLnRvKHBsdXNJY29uLCAwLjMsIHtcbiAgICAgICAgYXR0cjp7eDE6IC0zMCwgeDI6IDMwLCB5MTozMCwgeTI6MzB9XG4gICAgICB9KVxuICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKFwib3BlbmVkXCIpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Q3Vyc29yIC8+XG4gICAgICA8Q29udGFpbmVyIGNsYXNzTmFtZT1cIm1haW5cIj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT1cImZpcnN0U2VjdGlvblwiXG4gICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBgfVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgIHdpZHRoOiA5MCU7XG4gICAgICAgICAgICAgIGhlaWdodDogNjAlO1xuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc5MHB4KSB7XG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGluaXRpYWw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHBcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMDBweDtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG5cbiAgICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMHZ3O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBjb250ZW50LnRpdGxlXzEgfX1cbiAgICAgICAgICAgID48L3A+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAgICAgICAgICAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMS41ZW07XG5cbiAgICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XG4gICAgICAgICAgICAgICAgICBmb250LXNpemU6IDV2dztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBjb250ZW50LnBhcmFncmFwaF8xIH19XG4gICAgICAgICAgICA+PC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9XCJzZWNvbmRTZWN0aW9uXCJcbiAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgbWluLWhlaWdodDogMTAwdmg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICAgIGB9XG4gICAgICAgID5cbiAgICAgICAgICA8cFxuICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAgICAgICAgICAgbWFyZ2luOiAxMHZoIDAgMCA1dnc7XG5cbiAgICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogNS43dnc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGB9XG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGNvbnRlbnQudGl0bGVfMiB9fVxuICAgICAgICAgID48L3A+XG5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAyNnB4O1xuICAgICAgICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XG4gICAgICAgICAgICAgIG1hcmdpbjogYXV0byAxMCUgYXV0byAxMCU7XG4gICAgICAgICAgICAgIGNvbHVtbi1nYXA6IDV2dztcbiAgICAgICAgICAgICAgcm93LWdhcDogNXZoO1xuXG4gICAgICAgICAgICAgIHAgc3VwIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogI2Y3ZjdhODtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgICAgICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcbiAgICAgICAgICAgICAgICByb3ctZ2FwOiAwO1xuICAgICAgICAgICAgICAgIG1hcmdpbjogNXZoIDEwJSA1dmggMTAlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogNi4xdnc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFBvaW50cyAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgICAgICAgICB3aWR0aDogNzAlO1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgICAgIG1hcmdpbjogOTBweCAwIDkwcHggMDtcblxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA4ODBweCkge1xud2lkdGg6OTAlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGB9XG4gICAgICAgID5cbiAgICAgICAgICA8U2VydmljZXNUYWJsZSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvQ29udGFpbmVyPlxuICAgICAgPEZvb3RlciAvPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChTZXJ2aWNlcyk7XG5cbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5tYWluYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTdlOWYyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuYDsiXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref11= false?undefined:{name:\"1ybr3ya-oneService\",styles:\"opacity:0;pointer-events:none;margin-top:20px;@media only screen and (max-width: 700px){grid-column:1/3;grid-row:2/3;margin-top:0;}@media only screen and (max-width: 425px){grid-column:1/4;};label:oneService;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref12= false?undefined:{name:\"1g12y3b-oneService\",styles:\"font-size:18px;label:oneService;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref13= false?undefined:{name:\"1db5l97-oneService\",styles:\"height:90px;display:grid;align-items:center;label:oneService;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref14= false?undefined:{name:\"1orwbm5-oneService\",styles:\"width:100%;height:auto;label:oneService;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref15= false?undefined:{name:\"1db5l97-oneService\",styles:\"height:90px;display:grid;align-items:center;label:oneService;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref16= false?undefined:{name:\"130cm4h-oneService\",styles:\"display:grid;grid-template-columns:50px 1fr 2fr 1fr;column-gap:3vw;border-top:0.5px solid #707070;border-bottom:0.5px solid #707070;height:90px;@media only screen and (max-width: 700px){grid-template-columns:50px auto auto;};label:oneService;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};const Services=({state})=>{//console.log(state);\nconst data=state.source.get(state.router.link);//console.log(data);\nconst page=state.source[data.type][data.id];//console.log(page);\nconst content=page.acf;console.log(content);const points=[];let counter=0;const getPoints=()=>{content.points.forEach(el=>{counter++;const onePoint=Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsxs\"])(\"p\",{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsxs\"])(\"sup\",{children:[counter,\".\"]}),\" \",el.point]});points.push(onePoint);});};getPoints();const Points=()=>{return points;};const services=[];const getServices=()=>{content.services.forEach(service=>{const serviceIcon=service.service_icon;const serviceTitle=service.service_title;const serviceText=service.service_text;const oneService=Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsxs\"])(\"div\",{className:\"oneService\",css:_ref16,onClick:event=>{openUp(event);},children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"div\",{css:_ref15,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"img\",{css:_ref14,src:serviceIcon})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"div\",{css:_ref13,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"p\",{css:_ref12,children:serviceTitle})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"div\",{className:\"oneServiceText\",css:_ref11,dangerouslySetInnerHTML:{__html:serviceText}}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"div\",{css:_ref10,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"svg\",{css:_ref9,xmlns:\"http://www.w3.org/2000/svg\",width:\"50\",height:\"50\",viewBox:\"0 0 59 59\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsxs\"])(\"g\",{id:\"Group_43\",\"data-name\":\"Group 43\",transform:\"translate(-1440.5 -2358.5)\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"line\",{id:\"Line_13\",\"data-name\":\"Line 13\",y2:\"59\",transform:\"translate(1470.5 2358.5)\",fill:\"none\",stroke:\"#707070\",strokeWidth:\"1\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"line\",{id:\"Line_14\",\"data-name\":\"Line 14\",x1:\"59\",transform:\"translate(1440.5 2388.5)\",fill:\"none\",stroke:\"#707070\",strokeWidth:\"1\"})]})})})]});services.push(oneService);});};getServices();const ServicesTable=()=>{return services;};const openUp=event=>{const hiddenText=event.currentTarget.querySelector(\".oneServiceText\");const plusIcon=event.currentTarget.querySelector(\"#Line_13\");if(event.currentTarget.classList.contains(\"opened\")){gsap__WEBPACK_IMPORTED_MODULE_2__[\"default\"].to(event.currentTarget,0.3,{height:90});gsap__WEBPACK_IMPORTED_MODULE_2__[\"default\"].to(hiddenText,0.1,{opacity:0});gsap__WEBPACK_IMPORTED_MODULE_2__[\"default\"].to(plusIcon,0.3,{attr:{x1:0,x2:0,y1:0,y2:59}});event.currentTarget.classList.remove(\"opened\");}else{gsap__WEBPACK_IMPORTED_MODULE_2__[\"default\"].to(event.currentTarget,0.3,{height:\"auto\"});gsap__WEBPACK_IMPORTED_MODULE_2__[\"default\"].to(hiddenText,0.3,{delay:0.2,opacity:1});gsap__WEBPACK_IMPORTED_MODULE_2__[\"default\"].to(plusIcon,0.3,{attr:{x1:-30,x2:30,y1:30,y2:30}});event.currentTarget.classList.add(\"opened\");}};return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(_cursor__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsxs\"])(Container,{className:\"main\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"div\",{className:\"firstSection\",css:_ref8,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsxs\"])(\"div\",{css:_ref7,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"p\",{css:_ref6,dangerouslySetInnerHTML:{__html:content.title_1}}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"div\",{css:_ref5,dangerouslySetInnerHTML:{__html:content.paragraph_1}})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsxs\"])(\"div\",{className:\"secondSection\",css:_ref4,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"p\",{css:_ref3,dangerouslySetInnerHTML:{__html:content.title_2}}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"div\",{css:_ref2,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(Points,{})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"div\",{css:_ref,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(ServicesTable,{})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(_footer__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"connect\"])(Services));const Container=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"main\", false?undefined:{target:\"e1okyqew0\",label:\"Container\"})( false?undefined:{name:\"1ycer7y\",styles:\"background-color:#e7e9f2;display:flex;flex-direction:column\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/rounda/src/components/servicess.js\n");

/***/ })

})