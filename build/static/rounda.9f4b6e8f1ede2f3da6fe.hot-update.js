webpackHotUpdate("rounda",{

/***/ "./packages/rounda/src/components/AboutTop.js":
/*!****************************************************!*\
  !*** ./packages/rounda/src/components/AboutTop.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gsap */ \"./node_modules/gsap/index.js\");\n/* harmony import */ var gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! gsap/ScrollTrigger */ \"./node_modules/gsap/ScrollTrigger.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}gsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].registerPlugin(gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_5__[\"ScrollTrigger\"]);var _ref= false?undefined:{name:\"1iw13ks-About\",styles:\"display:flex;flex-direction:row;@media only screen and (max-width:768px){flex-direction:column;};label:About;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL0Fib3V0VG9wLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtDa0IiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvQWJvdXRUb3AuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgY3NzLCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gXCJnc2FwL1Njcm9sbFRyaWdnZXJcIjtcclxuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcclxuXHJcbmNvbnN0IEFib3V0ID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICBjb25zdCB0b3BTZWN0aW9uID0gdXNlUmVmKG51bGwpO1xyXG5cclxuICBjb25zdCBwaW5UaGVTZWN0aW9uID0gKCkgPT4ge1xyXG4gICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xyXG4gICAgICB0cmlnZ2VyOiBbdG9wU2VjdGlvbi5jdXJyZW50XSxcclxuICAgICAgc3RhcnQ6IFwiYm90dG9tIGJvdHRvbVwiLFxyXG4gICAgICBwaW46IHRydWUsXHJcbiAgICAgIHBpblNwYWNpbmc6IGZhbHNlLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHBpblRoZVNlY3Rpb24oKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8Q29udGFpbmVyIGNsYXNzTmFtZT1cInRvcFwiIHJlZj17dG9wU2VjdGlvbn0+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgYH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8cFxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTB2dztcclxuICAgICAgICAgICAgICB3aWR0aDogNDAlO1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNjAlO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMX1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2dztcclxuICAgICAgICAgICAgICBtYXgtd2lkdGg6IDQ0MHB4O1xyXG4gICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDQ0NnB4O1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogODB2dztcclxuICAgICAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDx2aWRlbyBhdXRvUGxheSBsb29wIG11dGVkIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgYH0+XHJcbiAgPHNvdXJjZSBzcmM9e2NvbnRlbnQuYW5pbWF0aW9uXzF9IHR5cGU9XCJ2aWRlby9tcDRcIi8+XHJcbjwvdmlkZW8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNjQwcHg7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0byBhdXRvO1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxwXHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA3MCU7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMn1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZ3O1xyXG4gICAgICAgICAgICAgIG1heC13aWR0aDogNjQwcHg7XHJcbiAgICAgICAgICAgICAgbWF4LWhlaWdodDogMzQ2cHg7XHJcblxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IGxvb3AgbXV0ZWQgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgICBgfT5cclxuICA8c291cmNlIHNyYz17Y29udGVudC5hbmltYXRpb25fMn0gdHlwZT1cInZpZGVvL21wNFwiLz5cclxuPC92aWRlbz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEFib3V0KTtcclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref2= false?undefined:{name:\"1p2l0fg-About\",styles:\"margin-left:5vw;margin-right:10vw;width:40%;@media only screen and (max-width:768px){width:60%;margin-right:0;};label:About;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL0Fib3V0VG9wLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRDb0IiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvQWJvdXRUb3AuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgY3NzLCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gXCJnc2FwL1Njcm9sbFRyaWdnZXJcIjtcclxuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcclxuXHJcbmNvbnN0IEFib3V0ID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICBjb25zdCB0b3BTZWN0aW9uID0gdXNlUmVmKG51bGwpO1xyXG5cclxuICBjb25zdCBwaW5UaGVTZWN0aW9uID0gKCkgPT4ge1xyXG4gICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xyXG4gICAgICB0cmlnZ2VyOiBbdG9wU2VjdGlvbi5jdXJyZW50XSxcclxuICAgICAgc3RhcnQ6IFwiYm90dG9tIGJvdHRvbVwiLFxyXG4gICAgICBwaW46IHRydWUsXHJcbiAgICAgIHBpblNwYWNpbmc6IGZhbHNlLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHBpblRoZVNlY3Rpb24oKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8Q29udGFpbmVyIGNsYXNzTmFtZT1cInRvcFwiIHJlZj17dG9wU2VjdGlvbn0+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgYH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8cFxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTB2dztcclxuICAgICAgICAgICAgICB3aWR0aDogNDAlO1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNjAlO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMX1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2dztcclxuICAgICAgICAgICAgICBtYXgtd2lkdGg6IDQ0MHB4O1xyXG4gICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDQ0NnB4O1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogODB2dztcclxuICAgICAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDx2aWRlbyBhdXRvUGxheSBsb29wIG11dGVkIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgYH0+XHJcbiAgPHNvdXJjZSBzcmM9e2NvbnRlbnQuYW5pbWF0aW9uXzF9IHR5cGU9XCJ2aWRlby9tcDRcIi8+XHJcbjwvdmlkZW8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNjQwcHg7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0byBhdXRvO1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxwXHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA3MCU7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMn1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZ3O1xyXG4gICAgICAgICAgICAgIG1heC13aWR0aDogNjQwcHg7XHJcbiAgICAgICAgICAgICAgbWF4LWhlaWdodDogMzQ2cHg7XHJcblxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IGxvb3AgbXV0ZWQgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgICBgfT5cclxuICA8c291cmNlIHNyYz17Y29udGVudC5hbmltYXRpb25fMn0gdHlwZT1cInZpZGVvL21wNFwiLz5cclxuPC92aWRlbz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEFib3V0KTtcclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref3= false?undefined:{name:\"og67aj-About\",styles:\"pointer-events:none;overflow:hidden;margin-right:5vw;width:100vw;height:100vw;max-width:440px;max-height:446px;@media only screen and (max-width:768px){margin-right:0;width:80vw;align-self:center;};label:About;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL0Fib3V0VG9wLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBEb0IiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvQWJvdXRUb3AuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgY3NzLCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gXCJnc2FwL1Njcm9sbFRyaWdnZXJcIjtcclxuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcclxuXHJcbmNvbnN0IEFib3V0ID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICBjb25zdCB0b3BTZWN0aW9uID0gdXNlUmVmKG51bGwpO1xyXG5cclxuICBjb25zdCBwaW5UaGVTZWN0aW9uID0gKCkgPT4ge1xyXG4gICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xyXG4gICAgICB0cmlnZ2VyOiBbdG9wU2VjdGlvbi5jdXJyZW50XSxcclxuICAgICAgc3RhcnQ6IFwiYm90dG9tIGJvdHRvbVwiLFxyXG4gICAgICBwaW46IHRydWUsXHJcbiAgICAgIHBpblNwYWNpbmc6IGZhbHNlLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHBpblRoZVNlY3Rpb24oKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8Q29udGFpbmVyIGNsYXNzTmFtZT1cInRvcFwiIHJlZj17dG9wU2VjdGlvbn0+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgYH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8cFxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTB2dztcclxuICAgICAgICAgICAgICB3aWR0aDogNDAlO1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNjAlO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMX1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2dztcclxuICAgICAgICAgICAgICBtYXgtd2lkdGg6IDQ0MHB4O1xyXG4gICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDQ0NnB4O1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogODB2dztcclxuICAgICAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDx2aWRlbyBhdXRvUGxheSBsb29wIG11dGVkIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgYH0+XHJcbiAgPHNvdXJjZSBzcmM9e2NvbnRlbnQuYW5pbWF0aW9uXzF9IHR5cGU9XCJ2aWRlby9tcDRcIi8+XHJcbjwvdmlkZW8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNjQwcHg7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0byBhdXRvO1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxwXHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA3MCU7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMn1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZ3O1xyXG4gICAgICAgICAgICAgIG1heC13aWR0aDogNjQwcHg7XHJcbiAgICAgICAgICAgICAgbWF4LWhlaWdodDogMzQ2cHg7XHJcblxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IGxvb3AgbXV0ZWQgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgICBgfT5cclxuICA8c291cmNlIHNyYz17Y29udGVudC5hbmltYXRpb25fMn0gdHlwZT1cInZpZGVvL21wNFwiLz5cclxuPC92aWRlbz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEFib3V0KTtcclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref4= false?undefined:{name:\"1sc845k-About\",styles:\"width:100%;height:100%;position:relative;;label:About;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL0Fib3V0VG9wLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBFK0MiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvQWJvdXRUb3AuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgY3NzLCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gXCJnc2FwL1Njcm9sbFRyaWdnZXJcIjtcclxuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcclxuXHJcbmNvbnN0IEFib3V0ID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICBjb25zdCB0b3BTZWN0aW9uID0gdXNlUmVmKG51bGwpO1xyXG5cclxuICBjb25zdCBwaW5UaGVTZWN0aW9uID0gKCkgPT4ge1xyXG4gICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xyXG4gICAgICB0cmlnZ2VyOiBbdG9wU2VjdGlvbi5jdXJyZW50XSxcclxuICAgICAgc3RhcnQ6IFwiYm90dG9tIGJvdHRvbVwiLFxyXG4gICAgICBwaW46IHRydWUsXHJcbiAgICAgIHBpblNwYWNpbmc6IGZhbHNlLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHBpblRoZVNlY3Rpb24oKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8Q29udGFpbmVyIGNsYXNzTmFtZT1cInRvcFwiIHJlZj17dG9wU2VjdGlvbn0+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgYH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8cFxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTB2dztcclxuICAgICAgICAgICAgICB3aWR0aDogNDAlO1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNjAlO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMX1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2dztcclxuICAgICAgICAgICAgICBtYXgtd2lkdGg6IDQ0MHB4O1xyXG4gICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDQ0NnB4O1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogODB2dztcclxuICAgICAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDx2aWRlbyBhdXRvUGxheSBsb29wIG11dGVkIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgYH0+XHJcbiAgPHNvdXJjZSBzcmM9e2NvbnRlbnQuYW5pbWF0aW9uXzF9IHR5cGU9XCJ2aWRlby9tcDRcIi8+XHJcbjwvdmlkZW8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNjQwcHg7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0byBhdXRvO1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxwXHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA3MCU7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMn1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZ3O1xyXG4gICAgICAgICAgICAgIG1heC13aWR0aDogNjQwcHg7XHJcbiAgICAgICAgICAgICAgbWF4LWhlaWdodDogMzQ2cHg7XHJcblxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IGxvb3AgbXV0ZWQgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgICBgfT5cclxuICA8c291cmNlIHNyYz17Y29udGVudC5hbmltYXRpb25fMn0gdHlwZT1cInZpZGVvL21wNFwiLz5cclxuPC92aWRlbz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEFib3V0KTtcclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref5= false?undefined:{name:\"1qqoewy-About\",styles:\"display:grid;grid-template-columns:640px;grid-template-rows:auto auto;margin-top:20vh;margin-bottom:20vh;margin-left:5vw;@media only screen and (max-width:768px){margin-left:0;grid-template-columns:1fr;};label:About;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL0Fib3V0VG9wLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFGa0IiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvQWJvdXRUb3AuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgY3NzLCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gXCJnc2FwL1Njcm9sbFRyaWdnZXJcIjtcclxuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcclxuXHJcbmNvbnN0IEFib3V0ID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICBjb25zdCB0b3BTZWN0aW9uID0gdXNlUmVmKG51bGwpO1xyXG5cclxuICBjb25zdCBwaW5UaGVTZWN0aW9uID0gKCkgPT4ge1xyXG4gICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xyXG4gICAgICB0cmlnZ2VyOiBbdG9wU2VjdGlvbi5jdXJyZW50XSxcclxuICAgICAgc3RhcnQ6IFwiYm90dG9tIGJvdHRvbVwiLFxyXG4gICAgICBwaW46IHRydWUsXHJcbiAgICAgIHBpblNwYWNpbmc6IGZhbHNlLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHBpblRoZVNlY3Rpb24oKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8Q29udGFpbmVyIGNsYXNzTmFtZT1cInRvcFwiIHJlZj17dG9wU2VjdGlvbn0+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgYH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8cFxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTB2dztcclxuICAgICAgICAgICAgICB3aWR0aDogNDAlO1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNjAlO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMX1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2dztcclxuICAgICAgICAgICAgICBtYXgtd2lkdGg6IDQ0MHB4O1xyXG4gICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDQ0NnB4O1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogODB2dztcclxuICAgICAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDx2aWRlbyBhdXRvUGxheSBsb29wIG11dGVkIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgYH0+XHJcbiAgPHNvdXJjZSBzcmM9e2NvbnRlbnQuYW5pbWF0aW9uXzF9IHR5cGU9XCJ2aWRlby9tcDRcIi8+XHJcbjwvdmlkZW8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNjQwcHg7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0byBhdXRvO1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxwXHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA3MCU7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMn1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZ3O1xyXG4gICAgICAgICAgICAgIG1heC13aWR0aDogNjQwcHg7XHJcbiAgICAgICAgICAgICAgbWF4LWhlaWdodDogMzQ2cHg7XHJcblxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IGxvb3AgbXV0ZWQgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgICBgfT5cclxuICA8c291cmNlIHNyYz17Y29udGVudC5hbmltYXRpb25fMn0gdHlwZT1cInZpZGVvL21wNFwiLz5cclxuPC92aWRlbz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEFib3V0KTtcclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref6= false?undefined:{name:\"nyfqnw-About\",styles:\"@media only screen and (max-width:768px){width:70%;margin-left:5vw;};label:About;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL0Fib3V0VG9wLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9Hb0IiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvQWJvdXRUb3AuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgY3NzLCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gXCJnc2FwL1Njcm9sbFRyaWdnZXJcIjtcclxuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcclxuXHJcbmNvbnN0IEFib3V0ID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICBjb25zdCB0b3BTZWN0aW9uID0gdXNlUmVmKG51bGwpO1xyXG5cclxuICBjb25zdCBwaW5UaGVTZWN0aW9uID0gKCkgPT4ge1xyXG4gICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xyXG4gICAgICB0cmlnZ2VyOiBbdG9wU2VjdGlvbi5jdXJyZW50XSxcclxuICAgICAgc3RhcnQ6IFwiYm90dG9tIGJvdHRvbVwiLFxyXG4gICAgICBwaW46IHRydWUsXHJcbiAgICAgIHBpblNwYWNpbmc6IGZhbHNlLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHBpblRoZVNlY3Rpb24oKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8Q29udGFpbmVyIGNsYXNzTmFtZT1cInRvcFwiIHJlZj17dG9wU2VjdGlvbn0+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgYH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8cFxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTB2dztcclxuICAgICAgICAgICAgICB3aWR0aDogNDAlO1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNjAlO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMX1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2dztcclxuICAgICAgICAgICAgICBtYXgtd2lkdGg6IDQ0MHB4O1xyXG4gICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDQ0NnB4O1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogODB2dztcclxuICAgICAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDx2aWRlbyBhdXRvUGxheSBsb29wIG11dGVkIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgYH0+XHJcbiAgPHNvdXJjZSBzcmM9e2NvbnRlbnQuYW5pbWF0aW9uXzF9IHR5cGU9XCJ2aWRlby9tcDRcIi8+XHJcbjwvdmlkZW8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNjQwcHg7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0byBhdXRvO1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxwXHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA3MCU7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMn1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZ3O1xyXG4gICAgICAgICAgICAgIG1heC13aWR0aDogNjQwcHg7XHJcbiAgICAgICAgICAgICAgbWF4LWhlaWdodDogMzQ2cHg7XHJcblxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IGxvb3AgbXV0ZWQgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgICBgfT5cclxuICA8c291cmNlIHNyYz17Y29udGVudC5hbmltYXRpb25fMn0gdHlwZT1cInZpZGVvL21wNFwiLz5cclxuPC92aWRlbz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEFib3V0KTtcclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref7= false?undefined:{name:\"10q0wwr-About\",styles:\"pointer-events:none;overflow:hidden;width:100%;height:100vw;max-width:640px;max-height:346px;@media only screen and (max-width:768px){justify-self:center;max-width:100%;};label:About;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL0Fib3V0VG9wLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThHb0IiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvQWJvdXRUb3AuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgY3NzLCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gXCJnc2FwL1Njcm9sbFRyaWdnZXJcIjtcclxuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcclxuXHJcbmNvbnN0IEFib3V0ID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICBjb25zdCB0b3BTZWN0aW9uID0gdXNlUmVmKG51bGwpO1xyXG5cclxuICBjb25zdCBwaW5UaGVTZWN0aW9uID0gKCkgPT4ge1xyXG4gICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xyXG4gICAgICB0cmlnZ2VyOiBbdG9wU2VjdGlvbi5jdXJyZW50XSxcclxuICAgICAgc3RhcnQ6IFwiYm90dG9tIGJvdHRvbVwiLFxyXG4gICAgICBwaW46IHRydWUsXHJcbiAgICAgIHBpblNwYWNpbmc6IGZhbHNlLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHBpblRoZVNlY3Rpb24oKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8Q29udGFpbmVyIGNsYXNzTmFtZT1cInRvcFwiIHJlZj17dG9wU2VjdGlvbn0+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgYH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8cFxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTB2dztcclxuICAgICAgICAgICAgICB3aWR0aDogNDAlO1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNjAlO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMX1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2dztcclxuICAgICAgICAgICAgICBtYXgtd2lkdGg6IDQ0MHB4O1xyXG4gICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDQ0NnB4O1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogODB2dztcclxuICAgICAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDx2aWRlbyBhdXRvUGxheSBsb29wIG11dGVkIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgYH0+XHJcbiAgPHNvdXJjZSBzcmM9e2NvbnRlbnQuYW5pbWF0aW9uXzF9IHR5cGU9XCJ2aWRlby9tcDRcIi8+XHJcbjwvdmlkZW8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNjQwcHg7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0byBhdXRvO1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxwXHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA3MCU7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMn1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZ3O1xyXG4gICAgICAgICAgICAgIG1heC13aWR0aDogNjQwcHg7XHJcbiAgICAgICAgICAgICAgbWF4LWhlaWdodDogMzQ2cHg7XHJcblxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IGxvb3AgbXV0ZWQgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgICBgfT5cclxuICA8c291cmNlIHNyYz17Y29udGVudC5hbmltYXRpb25fMn0gdHlwZT1cInZpZGVvL21wNFwiLz5cclxuPC92aWRlbz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEFib3V0KTtcclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref8= false?undefined:{name:\"1sc845k-About\",styles:\"width:100%;height:100%;position:relative;;label:About;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL0Fib3V0VG9wLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRIK0MiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvQWJvdXRUb3AuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgY3NzLCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gXCJnc2FwL1Njcm9sbFRyaWdnZXJcIjtcclxuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcclxuXHJcbmNvbnN0IEFib3V0ID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICBjb25zdCB0b3BTZWN0aW9uID0gdXNlUmVmKG51bGwpO1xyXG5cclxuICBjb25zdCBwaW5UaGVTZWN0aW9uID0gKCkgPT4ge1xyXG4gICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xyXG4gICAgICB0cmlnZ2VyOiBbdG9wU2VjdGlvbi5jdXJyZW50XSxcclxuICAgICAgc3RhcnQ6IFwiYm90dG9tIGJvdHRvbVwiLFxyXG4gICAgICBwaW46IHRydWUsXHJcbiAgICAgIHBpblNwYWNpbmc6IGZhbHNlLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHBpblRoZVNlY3Rpb24oKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8Q29udGFpbmVyIGNsYXNzTmFtZT1cInRvcFwiIHJlZj17dG9wU2VjdGlvbn0+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgYH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8cFxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTB2dztcclxuICAgICAgICAgICAgICB3aWR0aDogNDAlO1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNjAlO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMX1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2dztcclxuICAgICAgICAgICAgICBtYXgtd2lkdGg6IDQ0MHB4O1xyXG4gICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDQ0NnB4O1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogODB2dztcclxuICAgICAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDx2aWRlbyBhdXRvUGxheSBsb29wIG11dGVkIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgYH0+XHJcbiAgPHNvdXJjZSBzcmM9e2NvbnRlbnQuYW5pbWF0aW9uXzF9IHR5cGU9XCJ2aWRlby9tcDRcIi8+XHJcbjwvdmlkZW8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNjQwcHg7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0byBhdXRvO1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxwXHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA3MCU7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMn1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZ3O1xyXG4gICAgICAgICAgICAgIG1heC13aWR0aDogNjQwcHg7XHJcbiAgICAgICAgICAgICAgbWF4LWhlaWdodDogMzQ2cHg7XHJcblxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IGxvb3AgbXV0ZWQgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgICBgfT5cclxuICA8c291cmNlIHNyYz17Y29udGVudC5hbmltYXRpb25fMn0gdHlwZT1cInZpZGVvL21wNFwiLz5cclxuPC92aWRlbz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEFib3V0KTtcclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var About=(_ref9)=>{var{state}=_ref9;//console.log(state);\nvar data=state.source.get(state.router.link);//console.log(data);\nvar page=state.source[data.type][data.id];//console.log(page);\nvar content=page.acf;//console.log(content);\nvar topSection=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useRef\"])(null);var pinTheSection=()=>{gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_5__[\"ScrollTrigger\"].create({trigger:[topSection.current],start:\"bottom bottom\",pin:true,pinSpacing:false});};Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(()=>{pinTheSection();},[]);return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Container,{className:\"top\",ref:topSection},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{css:_ref},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",{css:_ref2},content.title_1),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{css:_ref3},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"video\",{autoPlay:true,loop:true,muted:true,css:_ref4},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"source\",{src:content.animation_1,type:\"video/mp4\"})))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{css:_ref5},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",{css:_ref6},content.title_2),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{css:_ref7},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"video\",{autoPlay:true,loop:true,muted:true,css:_ref8},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"source\",{src:content.animation_2,type:\"video/mp4\"}))))));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(About));var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e10egvbw0\",label:\"Container\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL0Fib3V0VG9wLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRJNEIiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvQWJvdXRUb3AuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgY3NzLCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gXCJnc2FwL1Njcm9sbFRyaWdnZXJcIjtcclxuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcclxuXHJcbmNvbnN0IEFib3V0ID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICBjb25zdCB0b3BTZWN0aW9uID0gdXNlUmVmKG51bGwpO1xyXG5cclxuICBjb25zdCBwaW5UaGVTZWN0aW9uID0gKCkgPT4ge1xyXG4gICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xyXG4gICAgICB0cmlnZ2VyOiBbdG9wU2VjdGlvbi5jdXJyZW50XSxcclxuICAgICAgc3RhcnQ6IFwiYm90dG9tIGJvdHRvbVwiLFxyXG4gICAgICBwaW46IHRydWUsXHJcbiAgICAgIHBpblNwYWNpbmc6IGZhbHNlLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHBpblRoZVNlY3Rpb24oKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8Q29udGFpbmVyIGNsYXNzTmFtZT1cInRvcFwiIHJlZj17dG9wU2VjdGlvbn0+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgYH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8cFxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTB2dztcclxuICAgICAgICAgICAgICB3aWR0aDogNDAlO1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNjAlO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMX1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2dztcclxuICAgICAgICAgICAgICBtYXgtd2lkdGg6IDQ0MHB4O1xyXG4gICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDQ0NnB4O1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogODB2dztcclxuICAgICAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDx2aWRlbyBhdXRvUGxheSBsb29wIG11dGVkIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgYH0+XHJcbiAgPHNvdXJjZSBzcmM9e2NvbnRlbnQuYW5pbWF0aW9uXzF9IHR5cGU9XCJ2aWRlby9tcDRcIi8+XHJcbjwvdmlkZW8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNjQwcHg7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0byBhdXRvO1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxwXHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA3MCU7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMn1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZ3O1xyXG4gICAgICAgICAgICAgIG1heC13aWR0aDogNjQwcHg7XHJcbiAgICAgICAgICAgICAgbWF4LWhlaWdodDogMzQ2cHg7XHJcblxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IGxvb3AgbXV0ZWQgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgICBgfT5cclxuICA8c291cmNlIHNyYz17Y29udGVudC5hbmltYXRpb25fMn0gdHlwZT1cInZpZGVvL21wNFwiLz5cclxuPC92aWRlbz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEFib3V0KTtcclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuIl19 */\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvQWJvdXRUb3AuanM/NDU3OSJdLCJuYW1lcyI6WyJnc2FwIiwicmVnaXN0ZXJQbHVnaW4iLCJTY3JvbGxUcmlnZ2VyIiwiQWJvdXQiLCJzdGF0ZSIsImRhdGEiLCJzb3VyY2UiLCJnZXQiLCJyb3V0ZXIiLCJsaW5rIiwicGFnZSIsInR5cGUiLCJpZCIsImNvbnRlbnQiLCJhY2YiLCJ0b3BTZWN0aW9uIiwidXNlUmVmIiwicGluVGhlU2VjdGlvbiIsImNyZWF0ZSIsInRyaWdnZXIiLCJjdXJyZW50Iiwic3RhcnQiLCJwaW4iLCJwaW5TcGFjaW5nIiwidXNlRWZmZWN0IiwidGl0bGVfMSIsImFuaW1hdGlvbl8xIiwidGl0bGVfMiIsImFuaW1hdGlvbl8yIiwiY29ubmVjdCIsIkNvbnRhaW5lciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O3FSQUlBQSw0Q0FBSSxDQUFDQyxjQUFMLENBQW9CQyxnRUFBcEIsRSxvbzhDQUVBLEdBQU1DLE1BQUssQ0FBRyxTQUFlLElBQWQsQ0FBRUMsS0FBRixDQUFjLE9BQzNCO0FBQ0EsR0FBTUMsS0FBSSxDQUFHRCxLQUFLLENBQUNFLE1BQU4sQ0FBYUMsR0FBYixDQUFpQkgsS0FBSyxDQUFDSSxNQUFOLENBQWFDLElBQTlCLENBQWIsQ0FDQTtBQUNBLEdBQU1DLEtBQUksQ0FBR04sS0FBSyxDQUFDRSxNQUFOLENBQWFELElBQUksQ0FBQ00sSUFBbEIsRUFBd0JOLElBQUksQ0FBQ08sRUFBN0IsQ0FBYixDQUNBO0FBQ0EsR0FBTUMsUUFBTyxDQUFHSCxJQUFJLENBQUNJLEdBQXJCLENBQ0E7QUFFQSxHQUFNQyxXQUFVLENBQUdDLG9EQUFNLENBQUMsSUFBRCxDQUF6QixDQUVBLEdBQU1DLGNBQWEsQ0FBRyxJQUFNLENBQzFCZixnRUFBYSxDQUFDZ0IsTUFBZCxDQUFxQixDQUNuQkMsT0FBTyxDQUFFLENBQUNKLFVBQVUsQ0FBQ0ssT0FBWixDQURVLENBRW5CQyxLQUFLLENBQUUsZUFGWSxDQUduQkMsR0FBRyxDQUFFLElBSGMsQ0FJbkJDLFVBQVUsQ0FBRSxLQUpPLENBQXJCLEVBTUQsQ0FQRCxDQVNBQyx1REFBUyxDQUFDLElBQU0sQ0FDZFAsYUFBYSxHQUNkLENBRlEsQ0FFTixFQUZNLENBQVQsQ0FJQSxNQUNFLHNIQUNFLDBEQUFDLFNBQUQsRUFBVyxTQUFTLENBQUMsS0FBckIsQ0FBMkIsR0FBRyxDQUFFRixVQUFoQyxFQUNFLGlFQUNFLEdBQUcsS0FETCxFQVVFLCtEQUNFLEdBQUcsTUFETCxFQVlHRixPQUFPLENBQUNZLE9BWlgsQ0FWRixDQXdCRSxpRUFDRSxHQUFHLE1BREwsRUFpQkUsbUVBQU8sUUFBUSxLQUFmLENBQWdCLElBQUksS0FBcEIsQ0FBcUIsS0FBSyxLQUExQixDQUEyQixHQUFHLE1BQTlCLEVBS1Ysb0VBQVEsR0FBRyxDQUFFWixPQUFPLENBQUNhLFdBQXJCLENBQWtDLElBQUksQ0FBQyxXQUF2QyxFQUxVLENBakJGLENBeEJGLENBREYsQ0FvREUsaUVBQ0UsR0FBRyxNQURMLEVBZUUsK0RBQ0UsR0FBRyxNQURMLEVBUUdiLE9BQU8sQ0FBQ2MsT0FSWCxDQWZGLENBeUJFLGlFQUNFLEdBQUcsTUFETCxFQWVFLG1FQUFPLFFBQVEsS0FBZixDQUFnQixJQUFJLEtBQXBCLENBQXFCLEtBQUssS0FBMUIsQ0FBMkIsR0FBRyxNQUE5QixFQUtWLG9FQUFRLEdBQUcsQ0FBRWQsT0FBTyxDQUFDZSxXQUFyQixDQUFrQyxJQUFJLENBQUMsV0FBdkMsRUFMVSxDQWZGLENBekJGLENBcERGLENBREYsQ0FERixDQTBHRCxDQWxJRCxDQW9JZUMsdUhBQU8sQ0FBQzFCLEtBQUQsQ0FBdEIsRUFFQSxHQUFNMkIsVUFBUywycUxBQWYiLCJmaWxlIjoiLi9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvQWJvdXRUb3AuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgY3NzLCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcclxuaW1wb3J0IHsgU2Nyb2xsVHJpZ2dlciB9IGZyb20gXCJnc2FwL1Njcm9sbFRyaWdnZXJcIjtcclxuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcclxuXHJcbmNvbnN0IEFib3V0ID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICBjb25zdCB0b3BTZWN0aW9uID0gdXNlUmVmKG51bGwpO1xyXG5cclxuICBjb25zdCBwaW5UaGVTZWN0aW9uID0gKCkgPT4ge1xyXG4gICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xyXG4gICAgICB0cmlnZ2VyOiBbdG9wU2VjdGlvbi5jdXJyZW50XSxcclxuICAgICAgc3RhcnQ6IFwiYm90dG9tIGJvdHRvbVwiLFxyXG4gICAgICBwaW46IHRydWUsXHJcbiAgICAgIHBpblNwYWNpbmc6IGZhbHNlLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHBpblRoZVNlY3Rpb24oKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8Q29udGFpbmVyIGNsYXNzTmFtZT1cInRvcFwiIHJlZj17dG9wU2VjdGlvbn0+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgYH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8cFxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTB2dztcclxuICAgICAgICAgICAgICB3aWR0aDogNDAlO1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNjAlO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMX1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwdnc7XHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2dztcclxuICAgICAgICAgICAgICBtYXgtd2lkdGg6IDQ0MHB4O1xyXG4gICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDQ0NnB4O1xyXG5cclxuICAgICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogODB2dztcclxuICAgICAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDx2aWRlbyBhdXRvUGxheSBsb29wIG11dGVkIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgYH0+XHJcbiAgPHNvdXJjZSBzcmM9e2NvbnRlbnQuYW5pbWF0aW9uXzF9IHR5cGU9XCJ2aWRlby9tcDRcIi8+XHJcbjwvdmlkZW8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNjQwcHg7XHJcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0byBhdXRvO1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHZoO1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxwXHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA3MCU7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXZ3O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge2NvbnRlbnQudGl0bGVfMn1cclxuICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHZ3O1xyXG4gICAgICAgICAgICAgIG1heC13aWR0aDogNjQwcHg7XHJcbiAgICAgICAgICAgICAgbWF4LWhlaWdodDogMzQ2cHg7XHJcblxyXG4gICAgICAgICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IGxvb3AgbXV0ZWQgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgICBgfT5cclxuICA8c291cmNlIHNyYz17Y29udGVudC5hbmltYXRpb25fMn0gdHlwZT1cInZpZGVvL21wNFwiLz5cclxuPC92aWRlbz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEFib3V0KTtcclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/rounda/src/components/AboutTop.js\n");

/***/ })

})