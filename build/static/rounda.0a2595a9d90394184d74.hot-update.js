webpackHotUpdate("rounda",{

/***/ "./packages/rounda/src/components/about.js":
/*!*************************************************!*\
  !*** ./packages/rounda/src/components/about.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap */ \"./node_modules/gsap/index.js\");\n/* harmony import */ var gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gsap/ScrollTrigger */ \"./node_modules/gsap/ScrollTrigger.js\");\n/* harmony import */ var _AboutTop__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./AboutTop */ \"./packages/rounda/src/components/AboutTop.js\");\n/* harmony import */ var _AboutBlack__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./AboutBlack */ \"./packages/rounda/src/components/AboutBlack.js\");\n/* harmony import */ var _AboutPeople__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./AboutPeople */ \"./packages/rounda/src/components/AboutPeople.js\");\n/* harmony import */ var _footer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./footer */ \"./packages/rounda/src/components/footer.js\");\n/* harmony import */ var _cursor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./cursor */ \"./packages/rounda/src/components/cursor.js\");\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}gsap__WEBPACK_IMPORTED_MODULE_3__[\"default\"].registerPlugin(gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_4__[\"ScrollTrigger\"]);var About=(_ref)=>{var{state}=_ref;//console.log(state);\nvar data=state.source.get(state.router.link);//console.log(data);\nvar page=state.source[data.type][data.id];//console.log(page);\nvar content=page.acf;//console.log(content);\nreturn Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_cursor__WEBPACK_IMPORTED_MODULE_9__[\"default\"],null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(Container,{className:\"main\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_AboutTop__WEBPACK_IMPORTED_MODULE_5__[\"default\"],null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_AboutBlack__WEBPACK_IMPORTED_MODULE_6__[\"default\"],null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_AboutPeople__WEBPACK_IMPORTED_MODULE_7__[\"default\"],null)),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__[\"jsx\"])(_footer__WEBPACK_IMPORTED_MODULE_8__[\"default\"],null));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(About));var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"main\",{target:\"e1tbzk380\",label:\"Container\"})( false?undefined:{name:\"b0pvtv\",styles:\"display:flex;flex-direction:column;padding-top:15vh;background-color:#e7e9f2;font-size:20px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL2Fib3V0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1DNkIiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvYWJvdXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCB9IGZyb20gXCJmcm9udGl0eVwiO1xyXG5pbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xyXG5pbXBvcnQgeyBTY3JvbGxUcmlnZ2VyIH0gZnJvbSBcImdzYXAvU2Nyb2xsVHJpZ2dlclwiO1xyXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpO1xyXG5pbXBvcnQgQWJvdXRUb3AgZnJvbSBcIi4vQWJvdXRUb3BcIjtcclxuaW1wb3J0IEFib3V0QmxhY2sgZnJvbSBcIi4vQWJvdXRCbGFja1wiO1xyXG5pbXBvcnQgQWJvdXRQZW9wbGUgZnJvbSBcIi4vQWJvdXRQZW9wbGVcIjtcclxuaW1wb3J0IEZvb3RlciBmcm9tIFwiLi9mb290ZXJcIjtcclxuaW1wb3J0IEN1cnNvciBmcm9tIFwiLi9jdXJzb3JcIjtcclxuXHJcbmNvbnN0IEFib3V0ID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgIDxDdXJzb3IgLz5cclxuICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJtYWluXCI+XHJcbiAgICAgICAgPEFib3V0VG9wIC8+XHJcbiAgICAgICAgPEFib3V0QmxhY2sgLz5cclxuICAgICAgICA8QWJvdXRQZW9wbGUgLz5cclxuICAgICAgPC9Db250YWluZXI+XHJcbiAgICAgIDxGb290ZXIgLz5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEFib3V0KTtcclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5tYWluYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBwYWRkaW5nLXRvcDogMTV2aDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTdlOWYyO1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvYWJvdXQuanM/OTlmZCJdLCJuYW1lcyI6WyJnc2FwIiwicmVnaXN0ZXJQbHVnaW4iLCJTY3JvbGxUcmlnZ2VyIiwiQWJvdXQiLCJzdGF0ZSIsImRhdGEiLCJzb3VyY2UiLCJnZXQiLCJyb3V0ZXIiLCJsaW5rIiwicGFnZSIsInR5cGUiLCJpZCIsImNvbnRlbnQiLCJhY2YiLCJjb25uZWN0IiwiQ29udGFpbmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztxUkFJQUEsNENBQUksQ0FBQ0MsY0FBTCxDQUFvQkMsZ0VBQXBCLEVBT0EsR0FBTUMsTUFBSyxDQUFHLFFBQWUsSUFBZCxDQUFFQyxLQUFGLENBQWMsTUFDM0I7QUFDQSxHQUFNQyxLQUFJLENBQUdELEtBQUssQ0FBQ0UsTUFBTixDQUFhQyxHQUFiLENBQWlCSCxLQUFLLENBQUNJLE1BQU4sQ0FBYUMsSUFBOUIsQ0FBYixDQUNBO0FBQ0EsR0FBTUMsS0FBSSxDQUFHTixLQUFLLENBQUNFLE1BQU4sQ0FBYUQsSUFBSSxDQUFDTSxJQUFsQixFQUF3Qk4sSUFBSSxDQUFDTyxFQUE3QixDQUFiLENBQ0E7QUFDQSxHQUFNQyxRQUFPLENBQUdILElBQUksQ0FBQ0ksR0FBckIsQ0FDQTtBQUVBLE1BQ0UsdUhBQ0EsMkRBQUMsK0NBQUQsTUFEQSxDQUVFLDJEQUFDLFNBQUQsRUFBVyxTQUFTLENBQUMsTUFBckIsRUFDRSwyREFBQyxpREFBRCxNQURGLENBRUUsMkRBQUMsbURBQUQsTUFGRixDQUdFLDJEQUFDLG9EQUFELE1BSEYsQ0FGRixDQU9FLDJEQUFDLCtDQUFELE1BUEYsQ0FERixDQVdELENBcEJELENBc0JlQyx1SEFBTyxDQUFDWixLQUFELENBQXRCLEVBRUEsR0FBTWEsVUFBUyxvckVBQWYiLCJmaWxlIjoiLi9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvYWJvdXQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCB9IGZyb20gXCJmcm9udGl0eVwiO1xyXG5pbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xyXG5pbXBvcnQgeyBTY3JvbGxUcmlnZ2VyIH0gZnJvbSBcImdzYXAvU2Nyb2xsVHJpZ2dlclwiO1xyXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpO1xyXG5pbXBvcnQgQWJvdXRUb3AgZnJvbSBcIi4vQWJvdXRUb3BcIjtcclxuaW1wb3J0IEFib3V0QmxhY2sgZnJvbSBcIi4vQWJvdXRCbGFja1wiO1xyXG5pbXBvcnQgQWJvdXRQZW9wbGUgZnJvbSBcIi4vQWJvdXRQZW9wbGVcIjtcclxuaW1wb3J0IEZvb3RlciBmcm9tIFwiLi9mb290ZXJcIjtcclxuaW1wb3J0IEN1cnNvciBmcm9tIFwiLi9jdXJzb3JcIjtcclxuXHJcbmNvbnN0IEFib3V0ID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgIDxDdXJzb3IgLz5cclxuICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJtYWluXCI+XHJcbiAgICAgICAgPEFib3V0VG9wIC8+XHJcbiAgICAgICAgPEFib3V0QmxhY2sgLz5cclxuICAgICAgICA8QWJvdXRQZW9wbGUgLz5cclxuICAgICAgPC9Db250YWluZXI+XHJcbiAgICAgIDxGb290ZXIgLz5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEFib3V0KTtcclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5tYWluYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBwYWRkaW5nLXRvcDogMTV2aDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTdlOWYyO1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuYDtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/rounda/src/components/about.js\n");

/***/ }),

/***/ "./packages/rounda/src/components/home.js":
/*!************************************************!*\
  !*** ./packages/rounda/src/components/home.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _black__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./black */ \"./packages/rounda/src/components/black.js\");\n/* harmony import */ var _FirstLayer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./FirstLayer */ \"./packages/rounda/src/components/FirstLayer.js\");\n/* harmony import */ var _blue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./blue */ \"./packages/rounda/src/components/blue.js\");\n/* harmony import */ var _footer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./footer */ \"./packages/rounda/src/components/footer.js\");\n/* harmony import */ var _cursor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cursor */ \"./packages/rounda/src/components/cursor.js\");\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var Home=(_ref)=>{var{state}=_ref;return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_cursor__WEBPACK_IMPORTED_MODULE_7__[\"default\"],null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Container,{className:\"main\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_FirstLayer__WEBPACK_IMPORTED_MODULE_4__[\"default\"],null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_black__WEBPACK_IMPORTED_MODULE_3__[\"default\"],null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_blue__WEBPACK_IMPORTED_MODULE_5__[\"default\"],null)),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_footer__WEBPACK_IMPORTED_MODULE_6__[\"default\"],null));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Home));var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"main\",{target:\"etevuke0\",label:\"Container\"})( false?undefined:{name:\"1re6hhs\",styles:\"display:flex;flex-direction:column;img:hover{filter:invert(20%) sepia(75%) saturate(6766%) hue-rotate(252deg) brightness(89%) contrast(86%);}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL2hvbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0I2QiIsImZpbGUiOiIvVXNlcnMvQWl2YXJzMS9EZXNrdG9wL0xvY2FsIFNpdGVzL1JvdW5kYS1ub2RlL3BhY2thZ2VzL3JvdW5kYS9zcmMvY29tcG9uZW50cy9ob21lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IEJsYWNrIGZyb20gXCIuL2JsYWNrXCI7XHJcbmltcG9ydCBGaXJzdExheWVyIGZyb20gXCIuL0ZpcnN0TGF5ZXJcIjtcclxuaW1wb3J0IEJsdWUgZnJvbSBcIi4vYmx1ZVwiO1xyXG5pbXBvcnQgRm9vdGVyIGZyb20gXCIuL2Zvb3RlclwiO1xyXG5pbXBvcnQgQ3Vyc29yIGZyb20gXCIuL2N1cnNvclwiO1xyXG5cclxuY29uc3QgSG9tZSA9ICh7IHN0YXRlIH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgIDxDdXJzb3IgLz5cclxuICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJtYWluXCI+XHJcbiAgICAgICAgPEZpcnN0TGF5ZXIgLz5cclxuICAgICAgICA8QmxhY2sgLz5cclxuICAgICAgICA8Qmx1ZSAvPlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICAgICAgPEZvb3RlciAvPlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoSG9tZSk7XHJcblxyXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQubWFpbmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcblxyXG4gIGltZzpob3ZlciB7XHJcbiAgICBmaWx0ZXI6IGludmVydCgyMCUpIHNlcGlhKDc1JSkgc2F0dXJhdGUoNjc2NiUpIGh1ZS1yb3RhdGUoMjUyZGVnKVxyXG4gICAgICBicmlnaHRuZXNzKDg5JSkgY29udHJhc3QoODYlKTtcclxuICB9XHJcbmA7XHJcbiJdfQ== */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvaG9tZS5qcz82YTY4Il0sIm5hbWVzIjpbIkhvbWUiLCJzdGF0ZSIsImNvbm5lY3QiLCJDb250YWluZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztxUkFRQSxHQUFNQSxLQUFJLENBQUcsUUFBZSxJQUFkLENBQUVDLEtBQUYsQ0FBYyxNQUMxQixNQUNFLHNIQUNBLDBEQUFDLCtDQUFELE1BREEsQ0FFRSwwREFBQyxTQUFELEVBQVcsU0FBUyxDQUFDLE1BQXJCLEVBQ0UsMERBQUMsbURBQUQsTUFERixDQUVFLDBEQUFDLDhDQUFELE1BRkYsQ0FHRSwwREFBQyw2Q0FBRCxNQUhGLENBRkYsQ0FPRSwwREFBQywrQ0FBRCxNQVBGLENBREYsQ0FXRCxDQVpELENBY2VDLHVIQUFPLENBQUNGLElBQUQsQ0FBdEIsRUFFQSxHQUFNRyxVQUFTLHl4REFBZiIsImZpbGUiOiIuL3BhY2thZ2VzL3JvdW5kYS9zcmMvY29tcG9uZW50cy9ob21lLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IEJsYWNrIGZyb20gXCIuL2JsYWNrXCI7XHJcbmltcG9ydCBGaXJzdExheWVyIGZyb20gXCIuL0ZpcnN0TGF5ZXJcIjtcclxuaW1wb3J0IEJsdWUgZnJvbSBcIi4vYmx1ZVwiO1xyXG5pbXBvcnQgRm9vdGVyIGZyb20gXCIuL2Zvb3RlclwiO1xyXG5pbXBvcnQgQ3Vyc29yIGZyb20gXCIuL2N1cnNvclwiO1xyXG5cclxuY29uc3QgSG9tZSA9ICh7IHN0YXRlIH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgIDxDdXJzb3IgLz5cclxuICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJtYWluXCI+XHJcbiAgICAgICAgPEZpcnN0TGF5ZXIgLz5cclxuICAgICAgICA8QmxhY2sgLz5cclxuICAgICAgICA8Qmx1ZSAvPlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICAgICAgPEZvb3RlciAvPlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoSG9tZSk7XHJcblxyXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQubWFpbmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcblxyXG4gIGltZzpob3ZlciB7XHJcbiAgICBmaWx0ZXI6IGludmVydCgyMCUpIHNlcGlhKDc1JSkgc2F0dXJhdGUoNjc2NiUpIGh1ZS1yb3RhdGUoMjUyZGVnKVxyXG4gICAgICBicmlnaHRuZXNzKDg5JSkgY29udHJhc3QoODYlKTtcclxuICB9XHJcbmA7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./packages/rounda/src/components/home.js\n");

/***/ }),

/***/ "./packages/rounda/src/components/services.js":
/*!****************************************************!*\
  !*** ./packages/rounda/src/components/services.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gsap */ \"./node_modules/gsap/index.js\");\n/* harmony import */ var gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! gsap/ScrollTrigger */ \"./node_modules/gsap/ScrollTrigger.js\");\n/* harmony import */ var _footer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./footer */ \"./packages/rounda/src/components/footer.js\");\n/* harmony import */ var _cursor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cursor */ \"./packages/rounda/src/components/cursor.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}gsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].registerPlugin(gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_5__[\"ScrollTrigger\"]);var _ref= false?undefined:{name:\"1ubdfd3-Services\",styles:\"display:grid;grid-template-columns:1fr 1fr;grid-template-rows:1fr 2fr;grid-gap:1em 5vw;min-height:100vh;font-size:40px;@media only screen and (max-width:768px){font-size:32px;padding:3vw;}@media only screen and (max-width:768px){font-size:7vw;};label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref2= false?undefined:{name:\"1r1oawq-Services\",styles:\"display:flex;flex-direction:column;text-align:right;grid-column:1/2;grid-row:1/2;align-self:end;;label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref3= false?undefined:{name:\"112odde-Services\",styles:\"cursor:pointer;p{margin:0;};label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref4= false?undefined:{name:\"15hh64n-Services\",styles:\"grid-column:2/3;grid-row:2/3;;label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref5= false?undefined:{name:\"112odde-Services\",styles:\"cursor:pointer;p{margin:0;};label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref6= false?undefined:{name:\"1mxhprg-Services\",styles:\"font-size:25px;opacity:0;pointer-events:none;@media only screen and (max-width:425px){font-size:5vw;};label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref7= false?undefined:{name:\"cty73s-Services\",styles:\"grid-column:1/2;grid-row:2/3;opacity:0;text-align:right;pointer-events:none;;label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref8= false?undefined:{name:\"131o066-Services\",styles:\"p{margin:0;font-size:25px;}@media only screen and (max-width:425px){p{font-size:5vw;}};label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref9= false?undefined:{name:\"szal6r-Services\",styles:\"font-size:25px;@media only screen and (max-width:425px){font-size:5vw;};label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref10= false?undefined:{name:\"u4m2w9-Services\",styles:\"p{margin:0;font-size:22px;}@media only screen and (max-width:425px){p{font-size:4.5vw;}};label:Services;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var Services=(_ref11)=>{var{state}=_ref11;//console.log(state);\nvar data=state.source.get(state.router.link);//console.log(data);\nvar page=state.source[data.type][data.id];//console.log(page);\nvar content=page.acf;//console.log(content);\nvar invert=event=>{var clickedEl=event.target.parentElement;var serviceOne=document.querySelector(\".serviceOne\");var serviceTwo=document.querySelector(\".serviceTwo\");if(clickedEl.classList.contains(\"closed\")&&clickedEl==serviceOne){//console.log(\"was closed\");\ngsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].from(\".textOne\",{y:-150});gsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].to(\".textOne\",{opacity:1,pointerEvents:\"auto\"});}else if(clickedEl.classList.contains(\"opened\")&&clickedEl==serviceOne){//console.log(\"was opened\");\nvar tl=gsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].timeline();tl.to(\".textOne\",{y:-150});tl.set(\".textOne\",{y:0});gsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].to(\".textOne\",{opacity:0,pointerEvents:\"none\"});}if(clickedEl.classList.contains(\"closed\")&&clickedEl==serviceTwo){//console.log(\"was closed\");\ngsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].from(\".textTwo\",{y:-150});gsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].to(\".textTwo\",{opacity:1,pointerEvents:\"auto\"});}else if(clickedEl.classList.contains(\"opened\")&&clickedEl==serviceTwo){//console.log(\"was opened\");\nvar _tl=gsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].timeline();_tl.to(\".textTwo\",{y:-150});_tl.set(\".textTwo\",{y:0});gsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].to(\".textTwo\",{opacity:0,pointerEvents:\"none\"});}if(clickedEl.classList.contains(\"closed\")){clickedEl.classList.remove(\"closed\");clickedEl.classList.add(\"opened\");gsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].to(\".main\",{backgroundColor:\"black\"});gsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].to(\".service\",{color:\"white\"});}else if(clickedEl.classList.contains(\"opened\")){clickedEl.classList.remove(\"opened\");clickedEl.classList.add(\"closed\");}if(serviceTwo.classList.contains(\"closed\")&&serviceOne.classList.contains(\"closed\")){gsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].to(\".main\",{backgroundColor:\"#e7e9f2\"});gsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].to(\".service\",{color:\"black\"});var _tl2=gsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].timeline();_tl2.to(\".text\",{y:-150});_tl2.set(\".text\",{y:0});gsap__WEBPACK_IMPORTED_MODULE_4__[\"default\"].to(\".text\",{opacity:0,pointerEvents:\"none\"});}};return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_cursor__WEBPACK_IMPORTED_MODULE_7__[\"default\"],null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Container,{className:\"main\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{css:_ref},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{css:_ref2},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"service serviceOne closed\",css:_ref3,dangerouslySetInnerHTML:{__html:content.service_1},onClick:event=>{invert(event);}})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{css:_ref4},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"service serviceTwo closed\",css:_ref5,dangerouslySetInnerHTML:{__html:content.service_2},onClick:event=>{invert(event);}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"text textTwo\",css:_ref6,dangerouslySetInnerHTML:{__html:content.section_2}})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"text textOne\",css:_ref7},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{css:_ref8,dangerouslySetInnerHTML:{__html:content.section_1}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{css:_ref9,dangerouslySetInnerHTML:{__html:content.tools_1}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{css:_ref10,dangerouslySetInnerHTML:{__html:content.section_3}})))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_footer__WEBPACK_IMPORTED_MODULE_6__[\"default\"],null));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Services));var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"main\",{target:\"e1py1jjc0\",label:\"Container\"})( false?undefined:{name:\"1b72jd5\",styles:\"background-color:#e7e9f2;display:flex;flex-direction:column;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/rounda/src/components/services.js\n");

/***/ }),

/***/ "./packages/rounda/src/components/works.js":
/*!*************************************************!*\
  !*** ./packages/rounda/src/components/works.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n/* harmony import */ var _footer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./footer */ \"./packages/rounda/src/components/footer.js\");\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./link */ \"./packages/rounda/src/components/link.js\");\n/* harmony import */ var _images_cursor_png__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../images/cursor.png */ \"./packages/rounda/src/images/cursor.png\");\n/* harmony import */ var _images_cursor_png__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_images_cursor_png__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _cursor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cursor */ \"./packages/rounda/src/components/cursor.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var _ref= false?undefined:{name:\"631697-Works\",styles:\"font-size:50px;width:40%;align-self:flex-end;margin-right:10vw;margin-top:0;@media only screen and (max-width:768px){align-self:center;width:80%;margin-right:10vw;margin-left:10vw;font-size:70px;}@media only screen and (max-width:425px){margin-top:0;font-size:17vw;};label:Works;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL3dvcmtzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFCa0IiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvd29ya3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCwgY3NzIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4vZm9vdGVyXCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCIuL2xpbmtcIjtcclxuaW1wb3J0IGN1cnNvciBmcm9tIFwiLi4vaW1hZ2VzL2N1cnNvci5wbmdcIjtcclxuaW1wb3J0IEN1cnNvciBmcm9tIFwiLi9jdXJzb3JcIjtcclxuXHJcbmNvbnN0IFdvcmtzID0gKHsgc3RhdGUsIGFjdGlvbnMgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgIDxDdXJzb3IgLz5cclxuICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJtYWluXCI+XHJcbiAgICAgICAgPHBcclxuICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICBmb250LXNpemU6IDUwcHg7XHJcbiAgICAgICAgICAgIHdpZHRoOiA0MCU7XHJcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xyXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwdnc7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgIHdpZHRoOiA4MCU7XHJcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogNzBweDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxN3Z3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtjb250ZW50LnRpdGxlXzF9XHJcbiAgICAgICAgPC9wPlxyXG5cclxuICAgICAgICA8RGl2T25lPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9mYWNjaWEtYS1mYWNjaWFcIj5cclxuICAgICAgICAgICAgPGltZyBzcmM9e2NvbnRlbnQuaW1hZ2VfMX0gLz5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8xfTwvcD5cclxuICAgICAgICA8L0Rpdk9uZT5cclxuXHJcbiAgICAgICAgPERpdlR3bz5cclxuICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2FnbmUtcG9ydGZvbGlvLnZlcmNlbC5hcHAvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzJ9IC8+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8cD57Y29udGVudC5wYXJhZ3JhcGhfMn08L3A+XHJcbiAgICAgICAgPC9EaXZUd28+XHJcblxyXG4gICAgICAgIDxEaXZUaHJlZT5cclxuICAgICAgICAgIDxTdWJEaXZPbmU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzN9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8zfTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2T25lPlxyXG5cclxuICAgICAgICAgIDxTdWJEaXZUd28+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzR9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF80fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VHdvPlxyXG5cclxuICAgICAgICAgIHsvKiA8U3ViRGl2VGhyZWU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzV9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF81fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VGhyZWU+ICovfVxyXG4gICAgICAgIDwvRGl2VGhyZWU+XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgICA8Rm9vdGVyIC8+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChXb3Jrcyk7XHJcblxyXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQubWFpbmBcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTdlOWYyO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBwYWRkaW5nLXRvcDogMTV2aDtcclxuICBwYWRkaW5nLWJvdHRvbTogMTV2aDtcclxuXHJcbiAgYSB7XHJcbiAgICBwb3NpdGlvbjogc3RhdGljO1xyXG4gICAgbWl4LWJsZW5kLW1vZGU6IG5vcm1hbDtcclxuICAgIHotaW5kZXg6IGluaXRpYWw7XHJcbiAgfVxyXG5cclxuICBkaXYge1xyXG4gICAgaW1nIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICBpbWc6aG92ZXIge1xyXG4gICAgICBmaWx0ZXI6IGludmVydCgyMCUpIHNlcGlhKDc1JSkgc2F0dXJhdGUoNjc2NiUpIGh1ZS1yb3RhdGUoMjUyZGVnKVxyXG4gICAgICAgIGJyaWdodG5lc3MoODklKSBjb250cmFzdCg4NiUpO1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLWxlZnQ6IDEwdnc7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICBtYXJnaW4tdG9wOiA1dnc7XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICB3aWR0aDogMTAwdnc7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdlRocmVlID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgcCB7XHJcbiAgICB3aWR0aDogNzAlO1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gICAgd2lkdGg6IDEwMHZ3O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFN1YkRpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luOiAwO1xyXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuXHJcbiAgaW1nIHtcclxuICAgIGN1cnNvcjogdXJsKCR7Y3Vyc29yfSksIGF1dG87XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW46IDA7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBpbWcge1xyXG4gICAgY3Vyc29yOiB1cmwoJHtjdXJzb3J9KSwgYXV0bztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VGhyZWUgPSBzdHlsZWQuZGl2YFxyXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICB3aWR0aDogNTV2dztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDI1cHgpIHtcclxuICAgIHdpZHRoOiA3MHZ3O1xyXG4gIH1cclxuYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var Works=(_ref2)=>{var{state,actions}=_ref2;//console.log(state);\nvar data=state.source.get(state.router.link);//console.log(data);\nvar page=state.source[data.type][data.id];//console.log(page);\nvar content=page.acf;//console.log(content);\nreturn Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_cursor__WEBPACK_IMPORTED_MODULE_7__[\"default\"],null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Container,{className:\"main\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",{css:_ref},content.title_1),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(DivOne,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_link__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{href:\"/faccia-a-faccia\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{src:content.image_1})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,content.paragraph_1)),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(DivTwo,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://agne-portfolio.vercel.app/\",target:\"_blank\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{src:content.image_2})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,content.paragraph_2)),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(DivThree,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(SubDivOne,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{src:content.image_3}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,content.paragraph_3)),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(SubDivTwo,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{src:content.image_4}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,content.paragraph_4)))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_footer__WEBPACK_IMPORTED_MODULE_4__[\"default\"],null));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Works));var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"main\",{target:\"e1hjn2e80\",label:\"Container\"})( false?undefined:{name:\"3a5v34\",styles:\"background-color:#e7e9f2;display:flex;flex-direction:column;padding-top:15vh;padding-bottom:15vh;a{position:static;mix-blend-mode:normal;z-index:initial;}div{img{width:100%;}img:hover{filter:invert(20%) sepia(75%) saturate(6766%) hue-rotate(252deg) brightness(89%) contrast(86%);}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL3dvcmtzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1GNkIiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvd29ya3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCwgY3NzIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4vZm9vdGVyXCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCIuL2xpbmtcIjtcclxuaW1wb3J0IGN1cnNvciBmcm9tIFwiLi4vaW1hZ2VzL2N1cnNvci5wbmdcIjtcclxuaW1wb3J0IEN1cnNvciBmcm9tIFwiLi9jdXJzb3JcIjtcclxuXHJcbmNvbnN0IFdvcmtzID0gKHsgc3RhdGUsIGFjdGlvbnMgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgIDxDdXJzb3IgLz5cclxuICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJtYWluXCI+XHJcbiAgICAgICAgPHBcclxuICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICBmb250LXNpemU6IDUwcHg7XHJcbiAgICAgICAgICAgIHdpZHRoOiA0MCU7XHJcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xyXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwdnc7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgIHdpZHRoOiA4MCU7XHJcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogNzBweDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxN3Z3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtjb250ZW50LnRpdGxlXzF9XHJcbiAgICAgICAgPC9wPlxyXG5cclxuICAgICAgICA8RGl2T25lPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9mYWNjaWEtYS1mYWNjaWFcIj5cclxuICAgICAgICAgICAgPGltZyBzcmM9e2NvbnRlbnQuaW1hZ2VfMX0gLz5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8xfTwvcD5cclxuICAgICAgICA8L0Rpdk9uZT5cclxuXHJcbiAgICAgICAgPERpdlR3bz5cclxuICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2FnbmUtcG9ydGZvbGlvLnZlcmNlbC5hcHAvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzJ9IC8+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8cD57Y29udGVudC5wYXJhZ3JhcGhfMn08L3A+XHJcbiAgICAgICAgPC9EaXZUd28+XHJcblxyXG4gICAgICAgIDxEaXZUaHJlZT5cclxuICAgICAgICAgIDxTdWJEaXZPbmU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzN9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8zfTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2T25lPlxyXG5cclxuICAgICAgICAgIDxTdWJEaXZUd28+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzR9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF80fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VHdvPlxyXG5cclxuICAgICAgICAgIHsvKiA8U3ViRGl2VGhyZWU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzV9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF81fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VGhyZWU+ICovfVxyXG4gICAgICAgIDwvRGl2VGhyZWU+XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgICA8Rm9vdGVyIC8+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChXb3Jrcyk7XHJcblxyXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQubWFpbmBcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTdlOWYyO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBwYWRkaW5nLXRvcDogMTV2aDtcclxuICBwYWRkaW5nLWJvdHRvbTogMTV2aDtcclxuXHJcbiAgYSB7XHJcbiAgICBwb3NpdGlvbjogc3RhdGljO1xyXG4gICAgbWl4LWJsZW5kLW1vZGU6IG5vcm1hbDtcclxuICAgIHotaW5kZXg6IGluaXRpYWw7XHJcbiAgfVxyXG5cclxuICBkaXYge1xyXG4gICAgaW1nIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICBpbWc6aG92ZXIge1xyXG4gICAgICBmaWx0ZXI6IGludmVydCgyMCUpIHNlcGlhKDc1JSkgc2F0dXJhdGUoNjc2NiUpIGh1ZS1yb3RhdGUoMjUyZGVnKVxyXG4gICAgICAgIGJyaWdodG5lc3MoODklKSBjb250cmFzdCg4NiUpO1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLWxlZnQ6IDEwdnc7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICBtYXJnaW4tdG9wOiA1dnc7XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICB3aWR0aDogMTAwdnc7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdlRocmVlID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgcCB7XHJcbiAgICB3aWR0aDogNzAlO1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gICAgd2lkdGg6IDEwMHZ3O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFN1YkRpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luOiAwO1xyXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuXHJcbiAgaW1nIHtcclxuICAgIGN1cnNvcjogdXJsKCR7Y3Vyc29yfSksIGF1dG87XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW46IDA7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBpbWcge1xyXG4gICAgY3Vyc29yOiB1cmwoJHtjdXJzb3J9KSwgYXV0bztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VGhyZWUgPSBzdHlsZWQuZGl2YFxyXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICB3aWR0aDogNTV2dztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDI1cHgpIHtcclxuICAgIHdpZHRoOiA3MHZ3O1xyXG4gIH1cclxuYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var DivOne=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1hjn2e81\",label:\"DivOne\"})( false?undefined:{name:\"1nntjh0\",styles:\"margin-left:10vw;margin-top:10vw;width:45vw;max-width:450px;@media only screen and (max-width:768px){margin-left:0;width:55vw;}@media only screen and (max-width:425px){width:70vw;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL3dvcmtzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJHeUIiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvd29ya3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCwgY3NzIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4vZm9vdGVyXCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCIuL2xpbmtcIjtcclxuaW1wb3J0IGN1cnNvciBmcm9tIFwiLi4vaW1hZ2VzL2N1cnNvci5wbmdcIjtcclxuaW1wb3J0IEN1cnNvciBmcm9tIFwiLi9jdXJzb3JcIjtcclxuXHJcbmNvbnN0IFdvcmtzID0gKHsgc3RhdGUsIGFjdGlvbnMgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgIDxDdXJzb3IgLz5cclxuICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJtYWluXCI+XHJcbiAgICAgICAgPHBcclxuICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICBmb250LXNpemU6IDUwcHg7XHJcbiAgICAgICAgICAgIHdpZHRoOiA0MCU7XHJcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xyXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwdnc7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgIHdpZHRoOiA4MCU7XHJcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogNzBweDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxN3Z3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtjb250ZW50LnRpdGxlXzF9XHJcbiAgICAgICAgPC9wPlxyXG5cclxuICAgICAgICA8RGl2T25lPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9mYWNjaWEtYS1mYWNjaWFcIj5cclxuICAgICAgICAgICAgPGltZyBzcmM9e2NvbnRlbnQuaW1hZ2VfMX0gLz5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8xfTwvcD5cclxuICAgICAgICA8L0Rpdk9uZT5cclxuXHJcbiAgICAgICAgPERpdlR3bz5cclxuICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2FnbmUtcG9ydGZvbGlvLnZlcmNlbC5hcHAvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzJ9IC8+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8cD57Y29udGVudC5wYXJhZ3JhcGhfMn08L3A+XHJcbiAgICAgICAgPC9EaXZUd28+XHJcblxyXG4gICAgICAgIDxEaXZUaHJlZT5cclxuICAgICAgICAgIDxTdWJEaXZPbmU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzN9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8zfTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2T25lPlxyXG5cclxuICAgICAgICAgIDxTdWJEaXZUd28+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzR9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF80fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VHdvPlxyXG5cclxuICAgICAgICAgIHsvKiA8U3ViRGl2VGhyZWU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzV9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF81fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VGhyZWU+ICovfVxyXG4gICAgICAgIDwvRGl2VGhyZWU+XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgICA8Rm9vdGVyIC8+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChXb3Jrcyk7XHJcblxyXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQubWFpbmBcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTdlOWYyO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBwYWRkaW5nLXRvcDogMTV2aDtcclxuICBwYWRkaW5nLWJvdHRvbTogMTV2aDtcclxuXHJcbiAgYSB7XHJcbiAgICBwb3NpdGlvbjogc3RhdGljO1xyXG4gICAgbWl4LWJsZW5kLW1vZGU6IG5vcm1hbDtcclxuICAgIHotaW5kZXg6IGluaXRpYWw7XHJcbiAgfVxyXG5cclxuICBkaXYge1xyXG4gICAgaW1nIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICBpbWc6aG92ZXIge1xyXG4gICAgICBmaWx0ZXI6IGludmVydCgyMCUpIHNlcGlhKDc1JSkgc2F0dXJhdGUoNjc2NiUpIGh1ZS1yb3RhdGUoMjUyZGVnKVxyXG4gICAgICAgIGJyaWdodG5lc3MoODklKSBjb250cmFzdCg4NiUpO1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLWxlZnQ6IDEwdnc7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICBtYXJnaW4tdG9wOiA1dnc7XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICB3aWR0aDogMTAwdnc7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdlRocmVlID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgcCB7XHJcbiAgICB3aWR0aDogNzAlO1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gICAgd2lkdGg6IDEwMHZ3O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFN1YkRpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luOiAwO1xyXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuXHJcbiAgaW1nIHtcclxuICAgIGN1cnNvcjogdXJsKCR7Y3Vyc29yfSksIGF1dG87XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW46IDA7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBpbWcge1xyXG4gICAgY3Vyc29yOiB1cmwoJHtjdXJzb3J9KSwgYXV0bztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VGhyZWUgPSBzdHlsZWQuZGl2YFxyXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICB3aWR0aDogNTV2dztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDI1cHgpIHtcclxuICAgIHdpZHRoOiA3MHZ3O1xyXG4gIH1cclxuYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var DivTwo=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1hjn2e82\",label:\"DivTwo\"})( false?undefined:{name:\"551u90\",styles:\"align-self:flex-end;margin-right:5vw;margin-top:5vw;width:60vw;max-width:650px;@media only screen and (max-width:768px){width:65vw;}@media only screen and (max-width:425px){width:100vw;margin-right:0;margin-top:10vh;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL3dvcmtzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJIeUIiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvd29ya3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCwgY3NzIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4vZm9vdGVyXCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCIuL2xpbmtcIjtcclxuaW1wb3J0IGN1cnNvciBmcm9tIFwiLi4vaW1hZ2VzL2N1cnNvci5wbmdcIjtcclxuaW1wb3J0IEN1cnNvciBmcm9tIFwiLi9jdXJzb3JcIjtcclxuXHJcbmNvbnN0IFdvcmtzID0gKHsgc3RhdGUsIGFjdGlvbnMgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgIDxDdXJzb3IgLz5cclxuICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJtYWluXCI+XHJcbiAgICAgICAgPHBcclxuICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICBmb250LXNpemU6IDUwcHg7XHJcbiAgICAgICAgICAgIHdpZHRoOiA0MCU7XHJcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xyXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwdnc7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgIHdpZHRoOiA4MCU7XHJcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogNzBweDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxN3Z3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtjb250ZW50LnRpdGxlXzF9XHJcbiAgICAgICAgPC9wPlxyXG5cclxuICAgICAgICA8RGl2T25lPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9mYWNjaWEtYS1mYWNjaWFcIj5cclxuICAgICAgICAgICAgPGltZyBzcmM9e2NvbnRlbnQuaW1hZ2VfMX0gLz5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8xfTwvcD5cclxuICAgICAgICA8L0Rpdk9uZT5cclxuXHJcbiAgICAgICAgPERpdlR3bz5cclxuICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2FnbmUtcG9ydGZvbGlvLnZlcmNlbC5hcHAvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzJ9IC8+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8cD57Y29udGVudC5wYXJhZ3JhcGhfMn08L3A+XHJcbiAgICAgICAgPC9EaXZUd28+XHJcblxyXG4gICAgICAgIDxEaXZUaHJlZT5cclxuICAgICAgICAgIDxTdWJEaXZPbmU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzN9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8zfTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2T25lPlxyXG5cclxuICAgICAgICAgIDxTdWJEaXZUd28+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzR9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF80fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VHdvPlxyXG5cclxuICAgICAgICAgIHsvKiA8U3ViRGl2VGhyZWU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzV9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF81fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VGhyZWU+ICovfVxyXG4gICAgICAgIDwvRGl2VGhyZWU+XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgICA8Rm9vdGVyIC8+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChXb3Jrcyk7XHJcblxyXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQubWFpbmBcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTdlOWYyO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBwYWRkaW5nLXRvcDogMTV2aDtcclxuICBwYWRkaW5nLWJvdHRvbTogMTV2aDtcclxuXHJcbiAgYSB7XHJcbiAgICBwb3NpdGlvbjogc3RhdGljO1xyXG4gICAgbWl4LWJsZW5kLW1vZGU6IG5vcm1hbDtcclxuICAgIHotaW5kZXg6IGluaXRpYWw7XHJcbiAgfVxyXG5cclxuICBkaXYge1xyXG4gICAgaW1nIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICBpbWc6aG92ZXIge1xyXG4gICAgICBmaWx0ZXI6IGludmVydCgyMCUpIHNlcGlhKDc1JSkgc2F0dXJhdGUoNjc2NiUpIGh1ZS1yb3RhdGUoMjUyZGVnKVxyXG4gICAgICAgIGJyaWdodG5lc3MoODklKSBjb250cmFzdCg4NiUpO1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLWxlZnQ6IDEwdnc7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICBtYXJnaW4tdG9wOiA1dnc7XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICB3aWR0aDogMTAwdnc7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdlRocmVlID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgcCB7XHJcbiAgICB3aWR0aDogNzAlO1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gICAgd2lkdGg6IDEwMHZ3O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFN1YkRpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luOiAwO1xyXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuXHJcbiAgaW1nIHtcclxuICAgIGN1cnNvcjogdXJsKCR7Y3Vyc29yfSksIGF1dG87XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW46IDA7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBpbWcge1xyXG4gICAgY3Vyc29yOiB1cmwoJHtjdXJzb3J9KSwgYXV0bztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VGhyZWUgPSBzdHlsZWQuZGl2YFxyXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICB3aWR0aDogNTV2dztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDI1cHgpIHtcclxuICAgIHdpZHRoOiA3MHZ3O1xyXG4gIH1cclxuYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var DivThree=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1hjn2e83\",label:\"DivThree\"})( false?undefined:{name:\"1x56aip\",styles:\"align-self:center;margin-top:10vw;display:flex;flex-direction:column;width:60vw;max-width:650px;p{width:70%;}@media only screen and (max-width:768px){width:65vw;}@media only screen and (max-width:425px){margin-top:10vh;width:100vw;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL3dvcmtzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZJMkIiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvd29ya3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCwgY3NzIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4vZm9vdGVyXCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCIuL2xpbmtcIjtcclxuaW1wb3J0IGN1cnNvciBmcm9tIFwiLi4vaW1hZ2VzL2N1cnNvci5wbmdcIjtcclxuaW1wb3J0IEN1cnNvciBmcm9tIFwiLi9jdXJzb3JcIjtcclxuXHJcbmNvbnN0IFdvcmtzID0gKHsgc3RhdGUsIGFjdGlvbnMgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgIDxDdXJzb3IgLz5cclxuICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJtYWluXCI+XHJcbiAgICAgICAgPHBcclxuICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICBmb250LXNpemU6IDUwcHg7XHJcbiAgICAgICAgICAgIHdpZHRoOiA0MCU7XHJcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xyXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwdnc7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgIHdpZHRoOiA4MCU7XHJcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogNzBweDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxN3Z3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtjb250ZW50LnRpdGxlXzF9XHJcbiAgICAgICAgPC9wPlxyXG5cclxuICAgICAgICA8RGl2T25lPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9mYWNjaWEtYS1mYWNjaWFcIj5cclxuICAgICAgICAgICAgPGltZyBzcmM9e2NvbnRlbnQuaW1hZ2VfMX0gLz5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8xfTwvcD5cclxuICAgICAgICA8L0Rpdk9uZT5cclxuXHJcbiAgICAgICAgPERpdlR3bz5cclxuICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2FnbmUtcG9ydGZvbGlvLnZlcmNlbC5hcHAvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzJ9IC8+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8cD57Y29udGVudC5wYXJhZ3JhcGhfMn08L3A+XHJcbiAgICAgICAgPC9EaXZUd28+XHJcblxyXG4gICAgICAgIDxEaXZUaHJlZT5cclxuICAgICAgICAgIDxTdWJEaXZPbmU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzN9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8zfTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2T25lPlxyXG5cclxuICAgICAgICAgIDxTdWJEaXZUd28+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzR9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF80fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VHdvPlxyXG5cclxuICAgICAgICAgIHsvKiA8U3ViRGl2VGhyZWU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzV9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF81fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VGhyZWU+ICovfVxyXG4gICAgICAgIDwvRGl2VGhyZWU+XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgICA8Rm9vdGVyIC8+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChXb3Jrcyk7XHJcblxyXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQubWFpbmBcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTdlOWYyO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBwYWRkaW5nLXRvcDogMTV2aDtcclxuICBwYWRkaW5nLWJvdHRvbTogMTV2aDtcclxuXHJcbiAgYSB7XHJcbiAgICBwb3NpdGlvbjogc3RhdGljO1xyXG4gICAgbWl4LWJsZW5kLW1vZGU6IG5vcm1hbDtcclxuICAgIHotaW5kZXg6IGluaXRpYWw7XHJcbiAgfVxyXG5cclxuICBkaXYge1xyXG4gICAgaW1nIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICBpbWc6aG92ZXIge1xyXG4gICAgICBmaWx0ZXI6IGludmVydCgyMCUpIHNlcGlhKDc1JSkgc2F0dXJhdGUoNjc2NiUpIGh1ZS1yb3RhdGUoMjUyZGVnKVxyXG4gICAgICAgIGJyaWdodG5lc3MoODklKSBjb250cmFzdCg4NiUpO1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLWxlZnQ6IDEwdnc7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICBtYXJnaW4tdG9wOiA1dnc7XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICB3aWR0aDogMTAwdnc7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdlRocmVlID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgcCB7XHJcbiAgICB3aWR0aDogNzAlO1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gICAgd2lkdGg6IDEwMHZ3O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFN1YkRpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luOiAwO1xyXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuXHJcbiAgaW1nIHtcclxuICAgIGN1cnNvcjogdXJsKCR7Y3Vyc29yfSksIGF1dG87XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW46IDA7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBpbWcge1xyXG4gICAgY3Vyc29yOiB1cmwoJHtjdXJzb3J9KSwgYXV0bztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VGhyZWUgPSBzdHlsZWQuZGl2YFxyXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICB3aWR0aDogNTV2dztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDI1cHgpIHtcclxuICAgIHdpZHRoOiA3MHZ3O1xyXG4gIH1cclxuYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var SubDivOne=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1hjn2e84\",label:\"SubDivOne\"})(\"margin:0;align-self:center;img{cursor:url(\",_images_cursor_png__WEBPACK_IMPORTED_MODULE_6___default.a,\"),auto;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL3dvcmtzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1LNEIiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvd29ya3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCwgY3NzIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4vZm9vdGVyXCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCIuL2xpbmtcIjtcclxuaW1wb3J0IGN1cnNvciBmcm9tIFwiLi4vaW1hZ2VzL2N1cnNvci5wbmdcIjtcclxuaW1wb3J0IEN1cnNvciBmcm9tIFwiLi9jdXJzb3JcIjtcclxuXHJcbmNvbnN0IFdvcmtzID0gKHsgc3RhdGUsIGFjdGlvbnMgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgIDxDdXJzb3IgLz5cclxuICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJtYWluXCI+XHJcbiAgICAgICAgPHBcclxuICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICBmb250LXNpemU6IDUwcHg7XHJcbiAgICAgICAgICAgIHdpZHRoOiA0MCU7XHJcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xyXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwdnc7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgIHdpZHRoOiA4MCU7XHJcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogNzBweDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxN3Z3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtjb250ZW50LnRpdGxlXzF9XHJcbiAgICAgICAgPC9wPlxyXG5cclxuICAgICAgICA8RGl2T25lPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9mYWNjaWEtYS1mYWNjaWFcIj5cclxuICAgICAgICAgICAgPGltZyBzcmM9e2NvbnRlbnQuaW1hZ2VfMX0gLz5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8xfTwvcD5cclxuICAgICAgICA8L0Rpdk9uZT5cclxuXHJcbiAgICAgICAgPERpdlR3bz5cclxuICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2FnbmUtcG9ydGZvbGlvLnZlcmNlbC5hcHAvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzJ9IC8+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8cD57Y29udGVudC5wYXJhZ3JhcGhfMn08L3A+XHJcbiAgICAgICAgPC9EaXZUd28+XHJcblxyXG4gICAgICAgIDxEaXZUaHJlZT5cclxuICAgICAgICAgIDxTdWJEaXZPbmU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzN9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8zfTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2T25lPlxyXG5cclxuICAgICAgICAgIDxTdWJEaXZUd28+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzR9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF80fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VHdvPlxyXG5cclxuICAgICAgICAgIHsvKiA8U3ViRGl2VGhyZWU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzV9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF81fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VGhyZWU+ICovfVxyXG4gICAgICAgIDwvRGl2VGhyZWU+XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgICA8Rm9vdGVyIC8+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChXb3Jrcyk7XHJcblxyXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQubWFpbmBcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTdlOWYyO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBwYWRkaW5nLXRvcDogMTV2aDtcclxuICBwYWRkaW5nLWJvdHRvbTogMTV2aDtcclxuXHJcbiAgYSB7XHJcbiAgICBwb3NpdGlvbjogc3RhdGljO1xyXG4gICAgbWl4LWJsZW5kLW1vZGU6IG5vcm1hbDtcclxuICAgIHotaW5kZXg6IGluaXRpYWw7XHJcbiAgfVxyXG5cclxuICBkaXYge1xyXG4gICAgaW1nIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICBpbWc6aG92ZXIge1xyXG4gICAgICBmaWx0ZXI6IGludmVydCgyMCUpIHNlcGlhKDc1JSkgc2F0dXJhdGUoNjc2NiUpIGh1ZS1yb3RhdGUoMjUyZGVnKVxyXG4gICAgICAgIGJyaWdodG5lc3MoODklKSBjb250cmFzdCg4NiUpO1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLWxlZnQ6IDEwdnc7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICBtYXJnaW4tdG9wOiA1dnc7XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICB3aWR0aDogMTAwdnc7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdlRocmVlID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgcCB7XHJcbiAgICB3aWR0aDogNzAlO1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gICAgd2lkdGg6IDEwMHZ3O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFN1YkRpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luOiAwO1xyXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuXHJcbiAgaW1nIHtcclxuICAgIGN1cnNvcjogdXJsKCR7Y3Vyc29yfSksIGF1dG87XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW46IDA7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBpbWcge1xyXG4gICAgY3Vyc29yOiB1cmwoJHtjdXJzb3J9KSwgYXV0bztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VGhyZWUgPSBzdHlsZWQuZGl2YFxyXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICB3aWR0aDogNTV2dztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDI1cHgpIHtcclxuICAgIHdpZHRoOiA3MHZ3O1xyXG4gIH1cclxuYDtcclxuIl19 */\"));var SubDivTwo=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1hjn2e85\",label:\"SubDivTwo\"})(\"align-self:flex-end;margin:0;margin-top:10vw;width:45vw;max-width:450px;img{cursor:url(\",_images_cursor_png__WEBPACK_IMPORTED_MODULE_6___default.a,\"),auto;}@media only screen and (max-width:768px){width:55vw;}@media only screen and (max-width:425px){width:70vw;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL3dvcmtzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRLNEIiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvd29ya3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCwgY3NzIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4vZm9vdGVyXCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCIuL2xpbmtcIjtcclxuaW1wb3J0IGN1cnNvciBmcm9tIFwiLi4vaW1hZ2VzL2N1cnNvci5wbmdcIjtcclxuaW1wb3J0IEN1cnNvciBmcm9tIFwiLi9jdXJzb3JcIjtcclxuXHJcbmNvbnN0IFdvcmtzID0gKHsgc3RhdGUsIGFjdGlvbnMgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgIDxDdXJzb3IgLz5cclxuICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJtYWluXCI+XHJcbiAgICAgICAgPHBcclxuICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICBmb250LXNpemU6IDUwcHg7XHJcbiAgICAgICAgICAgIHdpZHRoOiA0MCU7XHJcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xyXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwdnc7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgIHdpZHRoOiA4MCU7XHJcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogNzBweDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxN3Z3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtjb250ZW50LnRpdGxlXzF9XHJcbiAgICAgICAgPC9wPlxyXG5cclxuICAgICAgICA8RGl2T25lPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9mYWNjaWEtYS1mYWNjaWFcIj5cclxuICAgICAgICAgICAgPGltZyBzcmM9e2NvbnRlbnQuaW1hZ2VfMX0gLz5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8xfTwvcD5cclxuICAgICAgICA8L0Rpdk9uZT5cclxuXHJcbiAgICAgICAgPERpdlR3bz5cclxuICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2FnbmUtcG9ydGZvbGlvLnZlcmNlbC5hcHAvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzJ9IC8+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8cD57Y29udGVudC5wYXJhZ3JhcGhfMn08L3A+XHJcbiAgICAgICAgPC9EaXZUd28+XHJcblxyXG4gICAgICAgIDxEaXZUaHJlZT5cclxuICAgICAgICAgIDxTdWJEaXZPbmU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzN9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8zfTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2T25lPlxyXG5cclxuICAgICAgICAgIDxTdWJEaXZUd28+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzR9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF80fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VHdvPlxyXG5cclxuICAgICAgICAgIHsvKiA8U3ViRGl2VGhyZWU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzV9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF81fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VGhyZWU+ICovfVxyXG4gICAgICAgIDwvRGl2VGhyZWU+XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgICA8Rm9vdGVyIC8+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChXb3Jrcyk7XHJcblxyXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQubWFpbmBcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTdlOWYyO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBwYWRkaW5nLXRvcDogMTV2aDtcclxuICBwYWRkaW5nLWJvdHRvbTogMTV2aDtcclxuXHJcbiAgYSB7XHJcbiAgICBwb3NpdGlvbjogc3RhdGljO1xyXG4gICAgbWl4LWJsZW5kLW1vZGU6IG5vcm1hbDtcclxuICAgIHotaW5kZXg6IGluaXRpYWw7XHJcbiAgfVxyXG5cclxuICBkaXYge1xyXG4gICAgaW1nIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICBpbWc6aG92ZXIge1xyXG4gICAgICBmaWx0ZXI6IGludmVydCgyMCUpIHNlcGlhKDc1JSkgc2F0dXJhdGUoNjc2NiUpIGh1ZS1yb3RhdGUoMjUyZGVnKVxyXG4gICAgICAgIGJyaWdodG5lc3MoODklKSBjb250cmFzdCg4NiUpO1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLWxlZnQ6IDEwdnc7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICBtYXJnaW4tdG9wOiA1dnc7XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICB3aWR0aDogMTAwdnc7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdlRocmVlID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgcCB7XHJcbiAgICB3aWR0aDogNzAlO1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gICAgd2lkdGg6IDEwMHZ3O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFN1YkRpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luOiAwO1xyXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuXHJcbiAgaW1nIHtcclxuICAgIGN1cnNvcjogdXJsKCR7Y3Vyc29yfSksIGF1dG87XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW46IDA7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBpbWcge1xyXG4gICAgY3Vyc29yOiB1cmwoJHtjdXJzb3J9KSwgYXV0bztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VGhyZWUgPSBzdHlsZWQuZGl2YFxyXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICB3aWR0aDogNTV2dztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDI1cHgpIHtcclxuICAgIHdpZHRoOiA3MHZ3O1xyXG4gIH1cclxuYDtcclxuIl19 */\"));var SubDivThree=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1hjn2e86\",label:\"SubDivThree\"})( false?undefined:{name:\"11nh073\",styles:\"align-self:flex-start;margin-top:10vw;width:45vw;max-width:450px;@media only screen and (max-width:768px){width:55vw;}@media only screen and (max-width:425px){width:70vw;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9BaXZhcnMxL0Rlc2t0b3AvTG9jYWwgU2l0ZXMvUm91bmRhLW5vZGUvcGFja2FnZXMvcm91bmRhL3NyYy9jb21wb25lbnRzL3dvcmtzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdNOEIiLCJmaWxlIjoiL1VzZXJzL0FpdmFyczEvRGVza3RvcC9Mb2NhbCBTaXRlcy9Sb3VuZGEtbm9kZS9wYWNrYWdlcy9yb3VuZGEvc3JjL2NvbXBvbmVudHMvd29ya3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCwgY3NzIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4vZm9vdGVyXCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCIuL2xpbmtcIjtcclxuaW1wb3J0IGN1cnNvciBmcm9tIFwiLi4vaW1hZ2VzL2N1cnNvci5wbmdcIjtcclxuaW1wb3J0IEN1cnNvciBmcm9tIFwiLi9jdXJzb3JcIjtcclxuXHJcbmNvbnN0IFdvcmtzID0gKHsgc3RhdGUsIGFjdGlvbnMgfSkgPT4ge1xyXG4gIC8vY29uc29sZS5sb2coc3RhdGUpO1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gIGNvbnN0IHBhZ2UgPSBzdGF0ZS5zb3VyY2VbZGF0YS50eXBlXVtkYXRhLmlkXTtcclxuICAvL2NvbnNvbGUubG9nKHBhZ2UpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBwYWdlLmFjZjtcclxuICAvL2NvbnNvbGUubG9nKGNvbnRlbnQpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgIDxDdXJzb3IgLz5cclxuICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJtYWluXCI+XHJcbiAgICAgICAgPHBcclxuICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICBmb250LXNpemU6IDUwcHg7XHJcbiAgICAgICAgICAgIHdpZHRoOiA0MCU7XHJcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xyXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwdnc7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcblxyXG4gICAgICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xyXG4gICAgICAgICAgICAgIHdpZHRoOiA4MCU7XHJcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHZ3O1xyXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogNzBweDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxN3Z3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIHtjb250ZW50LnRpdGxlXzF9XHJcbiAgICAgICAgPC9wPlxyXG5cclxuICAgICAgICA8RGl2T25lPlxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9mYWNjaWEtYS1mYWNjaWFcIj5cclxuICAgICAgICAgICAgPGltZyBzcmM9e2NvbnRlbnQuaW1hZ2VfMX0gLz5cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8xfTwvcD5cclxuICAgICAgICA8L0Rpdk9uZT5cclxuXHJcbiAgICAgICAgPERpdlR3bz5cclxuICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2FnbmUtcG9ydGZvbGlvLnZlcmNlbC5hcHAvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzJ9IC8+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8cD57Y29udGVudC5wYXJhZ3JhcGhfMn08L3A+XHJcbiAgICAgICAgPC9EaXZUd28+XHJcblxyXG4gICAgICAgIDxEaXZUaHJlZT5cclxuICAgICAgICAgIDxTdWJEaXZPbmU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzN9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF8zfTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2T25lPlxyXG5cclxuICAgICAgICAgIDxTdWJEaXZUd28+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzR9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF80fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VHdvPlxyXG5cclxuICAgICAgICAgIHsvKiA8U3ViRGl2VGhyZWU+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXtjb250ZW50LmltYWdlXzV9IC8+XHJcbiAgICAgICAgICAgIDxwPntjb250ZW50LnBhcmFncmFwaF81fTwvcD5cclxuICAgICAgICAgIDwvU3ViRGl2VGhyZWU+ICovfVxyXG4gICAgICAgIDwvRGl2VGhyZWU+XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgICA8Rm9vdGVyIC8+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChXb3Jrcyk7XHJcblxyXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQubWFpbmBcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTdlOWYyO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBwYWRkaW5nLXRvcDogMTV2aDtcclxuICBwYWRkaW5nLWJvdHRvbTogMTV2aDtcclxuXHJcbiAgYSB7XHJcbiAgICBwb3NpdGlvbjogc3RhdGljO1xyXG4gICAgbWl4LWJsZW5kLW1vZGU6IG5vcm1hbDtcclxuICAgIHotaW5kZXg6IGluaXRpYWw7XHJcbiAgfVxyXG5cclxuICBkaXYge1xyXG4gICAgaW1nIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICBpbWc6aG92ZXIge1xyXG4gICAgICBmaWx0ZXI6IGludmVydCgyMCUpIHNlcGlhKDc1JSkgc2F0dXJhdGUoNjc2NiUpIGh1ZS1yb3RhdGUoMjUyZGVnKVxyXG4gICAgICAgIGJyaWdodG5lc3MoODklKSBjb250cmFzdCg4NiUpO1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLWxlZnQ6IDEwdnc7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW4tcmlnaHQ6IDV2dztcclxuICBtYXJnaW4tdG9wOiA1dnc7XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICB3aWR0aDogMTAwdnc7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERpdlRocmVlID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgd2lkdGg6IDYwdnc7XHJcbiAgbWF4LXdpZHRoOiA2NTBweDtcclxuXHJcbiAgcCB7XHJcbiAgICB3aWR0aDogNzAlO1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDY1dnc7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQyNXB4KSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHZoO1xyXG4gICAgd2lkdGg6IDEwMHZ3O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFN1YkRpdk9uZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luOiAwO1xyXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuXHJcbiAgaW1nIHtcclxuICAgIGN1cnNvcjogdXJsKCR7Y3Vyc29yfSksIGF1dG87XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VHdvID0gc3R5bGVkLmRpdmBcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICBtYXJnaW46IDA7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBpbWcge1xyXG4gICAgY3Vyc29yOiB1cmwoJHtjdXJzb3J9KSwgYXV0bztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIHdpZHRoOiA1NXZ3O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MjVweCkge1xyXG4gICAgd2lkdGg6IDcwdnc7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3ViRGl2VGhyZWUgPSBzdHlsZWQuZGl2YFxyXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgbWFyZ2luLXRvcDogMTB2dztcclxuICB3aWR0aDogNDV2dztcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICB3aWR0aDogNTV2dztcclxuICB9XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDI1cHgpIHtcclxuICAgIHdpZHRoOiA3MHZ3O1xyXG4gIH1cclxuYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/rounda/src/components/works.js\n");

/***/ })

})